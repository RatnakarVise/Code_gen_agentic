REPORT zmm_close_open_po.

"------------------------------------------------------------
" Forward declarations
"------------------------------------------------------------
CLASS lcl_alv_handler DEFINITION DEFERRED.

"------------------------------------------------------------
" Types
"------------------------------------------------------------
TYPES: BEGIN OF ty_ekpo_sel,
         ebeln TYPE ebeln,
         ebelp TYPE ebelp,
         ekorg TYPE ekorg,
         lifnr TYPE lifnr,
         matnr TYPE matnr,
         werks TYPE werks_d,
         menge TYPE ekpo-menge,
         wemng TYPE ekpo-wemng,
         aedat TYPE aedat,
       END OF ty_ekpo_sel.

" ALV/Output row structure from DDIC
TYPES ty_po_row TYPE zstr_po_close.

"------------------------------------------------------------
" Global data
"------------------------------------------------------------
DATA: gt_po TYPE STANDARD TABLE OF zstr_po_close WITH DEFAULT KEY,
      gs_po TYPE zstr_po_close.

" Selection range buffers
DATA: gr_ebeln TYPE RANGE OF ebeln,
      gr_ekorg TYPE RANGE OF ekorg,
      gr_werks TYPE RANGE OF werks_d,
      gr_lifnr TYPE RANGE OF lifnr,
      gr_aedat TYPE RANGE OF aedat.

" SALV objects
DATA: go_alv       TYPE REF TO cl_salv_table,
      go_events    TYPE REF TO cl_salv_events_table,
      go_functions TYPE REF TO cl_salv_functions_list,
      go_sel       TYPE REF TO cl_salv_selections,
      go_handler   TYPE REF TO lcl_alv_handler.

" Custom function code for SALV toolbar
CONSTANTS gc_func_close TYPE salv_de_function VALUE 'ZCLOSE'.

"------------------------------------------------------------
" Selection screen
"------------------------------------------------------------
SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-t01.
SELECT-OPTIONS: s_ebeln FOR ekko-ebeln,
                s_ekorg FOR ekko-ekorg,
                s_werks FOR ekpo-werks,
                s_lifnr FOR ekko-lifnr,
                s_aedat FOR ekko-aedat.
PARAMETERS: p_sim AS CHECKBOX DEFAULT 'X' USER-COMMAND upd.
SELECTION-SCREEN END OF BLOCK b1.

SELECTION-SCREEN COMMENT /1(60) text-t02.

INITIALIZATION.
  text-t01 = 'Selection Parameters'.
  text-t02 = 'Tip: Use Simulate Mode to preview results without updating.'.

AT SELECTION-SCREEN.
  " No specific checks required

START-OF-SELECTION.
  " Build local copies of select-options to range tables (for readability)
  PERFORM build_ranges.
  " Fetch open PO items (not deleted and not delivery completed)
  PERFORM fetch_open_pos.
  " Display ALV and enable user action
  PERFORM display_alv.

"------------------------------------------------------------
" Form: build_ranges
" Purpose: Copy select-options to range tables
"------------------------------------------------------------
FORM build_ranges.
  REFRESH: gr_ebeln, gr_ekorg, gr_werks, gr_lifnr, gr_aedat.

  gr_ebeln[] = s_ebeln[].
  gr_ekorg[] = s_ekorg[].
  gr_werks[] = s_werks[].
  gr_lifnr[] = s_lifnr[].
  gr_aedat[] = s_aedat[].
ENDFORM.

"------------------------------------------------------------
" Form: fetch_open_pos
" Purpose: Read PO items with open quantity and prepare ALV data
"------------------------------------------------------------
FORM fetch_open_pos.
  DATA: lt_join TYPE STANDARD TABLE OF ty_ekpo_sel WITH DEFAULT KEY,
        ls_join TYPE ty_ekpo_sel.

  REFRESH gt_po.

  SELECT a~ebeln,
         b~ebelp,
         a~ekorg,
         a~lifnr,
         b~matnr,
         b~werks,
         b~menge,
         b~wemng,
         a~aedat
    FROM ekko AS a
    INNER JOIN ekpo AS b
      ON a~ebeln = b~ebeln
    WHERE a~ebeln IN @gr_ebeln
      AND a~ekorg IN @gr_ekorg
      AND a~lifnr IN @gr_lifnr
      AND a~aedat IN @gr_aedat
      AND b~werks IN @gr_werks
      AND b~loekz = @space          " Not deleted
      AND b~elikz = @space          " Not delivery completed
  INTO TABLE @lt_join.

  LOOP AT lt_join INTO ls_join.
    DATA(lv_open) = ls_join-menge - ls_join-wemng.
    IF lv_open <= 0.
      CONTINUE.
    ENDIF.

    CLEAR gs_po.
    gs_po-ebeln     = ls_join-ebeln.
    gs_po-ebelp     = ls_join-ebelp.
    gs_po-ekorg     = ls_join-ekorg.
    gs_po-lifnr     = ls_join-lifnr.
    gs_po-matnr     = ls_join-matnr.
    gs_po-werks     = ls_join-werks.
    gs_po-open_qty  = lv_open.
    gs_po-aedat     = ls_join-aedat.
    gs_po-sel       = space.
    gs_po-status    = space.
    gs_po-message   = space.
    APPEND gs_po TO gt_po.
  ENDLOOP.

  SORT gt_po BY ebeln ebelp.
ENDFORM.

"------------------------------------------------------------
" Form: display_alv
" Purpose: Build SALV, configure columns/functions, show data
"------------------------------------------------------------
FORM display_alv.
  TRY.
      cl_salv_table=>factory(
        IMPORTING
          r_salv_table = go_alv
        CHANGING
          t_table      = gt_po ).

      " Optimize columns
      DATA(lo_cols) = go_alv->get_columns( ).
      lo_cols->set_optimize( abap_true ).

      " Column texts and lengths
      TRY.
          DATA(lo_col_sel) = lo_cols->get_column( 'SEL' ).
          lo_col_sel->set_short_text( 'Close' ).
          lo_col_sel->set_medium_text( 'Close Flag' ).
          lo_col_sel->set_long_text( 'Closure Flag' ).
        CATCH cx_salv_not_found.
      ENDTRY.

      TRY.
          DATA(lo_col_ebeln) = lo_cols->get_column( 'EBELN' ).
          lo_col_ebeln->set_short_text( 'PO' ).
          lo_col_ebeln->set_output_length( 10 ).
        CATCH cx_salv_not_found.
      ENDTRY.

      TRY.
          DATA(lo_col_ebelp) = lo_cols->get_column( 'EBELP' ).
          lo_col_ebelp->set_short_text( 'Item' ).
          lo_col_ebelp->set_output_length( 5 ).
        CATCH cx_salv_not_found.
      ENDTRY.

      TRY.
          DATA(lo_col_open) = lo_cols->get_column( 'OPEN_QTY' ).
          lo_col_open->set_short_text( 'Open Qty' ).
        CATCH cx_salv_not_found.
      ENDTRY.

      TRY.
          DATA(lo_col_msg) = lo_cols->get_column( 'MESSAGE' ).
          lo_col_msg->set_short_text( 'Status Message' ).
          lo_col_msg->set_output_length( 60 ).
        CATCH cx_salv_not_found.
      ENDTRY.

      " Enable standard functions + custom action
      go_functions = go_alv->get_functions( ).
      go_functions->set_all( abap_true ).
      go_functions->add_function(
        name     = gc_func_close
        icon     = '@11@' " checkmark
        text     = 'Close Selected'
        tooltip  = COND string(
                     WHEN p_sim = 'X'
                     THEN 'Simulate closure for selected items'
                     ELSE 'Close selected items (BAPI_PO_CHANGE)' )
        position = if_salv_c_function_position=>right_of_salv_functions ).

      " Multiple row selection
      go_sel = go_alv->get_selections( ).
      go_sel->set_selection_mode( if_salv_c_selection_mode=>multiple_row ).

      " Event handler
      go_events = go_alv->get_event( ).
      CREATE OBJECT go_handler.
      SET HANDLER go_handler->on_added_function FOR go_events.

      go_alv->display( ).

    CATCH cx_salv_msg INTO DATA(lx_salv).
      MESSAGE lx_salv->get_text( ) TYPE 'E'.
  ENDTRY.
ENDFORM.

"------------------------------------------------------------
" Form: close_selected
" Purpose: Close delivery for selected PO items (simulate or real)
"------------------------------------------------------------
FORM close_selected USING it_rows TYPE salv_t_row.
  DATA lt_rows TYPE salv_t_row.
  lt_rows = it_rows.

  IF lt_rows IS INITIAL.
    MESSAGE 'No rows selected.' TYPE 'I'.
    RETURN.
  ENDIF.

  " Prepare unique PO keys from selected rows (to minimize BAPI calls)
  DATA: ls_row   TYPE salv_s_row,
        lv_index TYPE sy-tabix,
        ls_item  TYPE zstr_po_close.

  TYPES: BEGIN OF ty_key,
           ebeln TYPE ebeln,
         END OF ty_key.
  DATA: lt_keys TYPE SORTED TABLE OF ty_key WITH UNIQUE KEY ebeln,
        ls_key  TYPE ty_key.

  LOOP AT lt_rows INTO ls_row.
    lv_index = ls_row-row.
    READ TABLE gt_po INTO ls_item INDEX lv_index.
    IF sy-subrc <> 0.
      CONTINUE.
    ENDIF.

    IF ls_item-open_qty <= 0.
      ls_item-status  = 'I'.
      ls_item-message = |No open quantity. Skipped.|.
      MODIFY gt_po FROM ls_item INDEX lv_index.
      CONTINUE.
    ENDIF.

    ls_key-ebeln = ls_item-ebeln.
    INSERT ls_key INTO TABLE lt_keys.
  ENDLOOP.

  " Process each PO via BAPI_PO_CHANGE
  LOOP AT lt_keys INTO ls_key.
    DATA: lt_poitem    TYPE TABLE OF bapimepoitem,
          lt_poitemx   TYPE TABLE OF bapimepoitemx,
          ls_poitem    TYPE bapimepoitem,
          ls_poitemx   TYPE bapimepoitemx,
          lt_return    TYPE TABLE OF bapiret2,
          ls_return    TYPE bapiret2,
          lt_aff_rows  TYPE STANDARD TABLE OF sy-tabix WITH DEFAULT KEY,
          lv_has_items TYPE abap_bool VALUE abap_false.

    REFRESH: lt_poitem, lt_poitemx, lt_return, lt_aff_rows.

    " Collect selected items for current PO
    LOOP AT lt_rows INTO ls_row.
      lv_index = ls_row-row.
      READ TABLE gt_po INTO ls_item INDEX lv_index.
      IF sy-subrc <> 0 OR ls_item-ebeln <> ls_key-ebeln.
        CONTINUE.
      ENDIF.

      IF ls_item-open_qty > 0.
        CLEAR: ls_poitem, ls_poitemx.

        ls_poitem-po_item     = ls_item-ebelp.
        ls_poitem-no_more_gr  = 'X'.  " Set delivery completed
        APPEND ls_poitem TO lt_poitem.

        ls_poitemx-po_item    = ls_item-ebelp.
        ls_poitemx-po_itemx   = 'X'.
        ls_poitemx-no_more_gr = 'X'.
        APPEND ls_poitemx TO lt_poitemx.

        APPEND lv_index TO lt_aff_rows.
        lv_has_items = abap_true.
      ENDIF.
    ENDLOOP.

    IF lv_has_items = abap_false.
      CONTINUE.
    ENDIF.

    " Simulation: mark only, do not call BAPI
    IF p_sim = 'X'.
      LOOP AT lt_aff_rows INTO lv_index.
        READ TABLE gt_po INTO ls_item INDEX lv_index.
        IF sy-subrc = 0.
          ls_item-status  = 'S'.
          ls_item-message = |Simulated: Delivery completion would be set.|.
          ls_item-sel     = 'X'.
          MODIFY gt_po FROM ls_item INDEX lv_index.
          PERFORM write_log USING ls_item-ebeln ls_item-ebelp 'S' ls_item-message p_sim.
        ENDIF.
      ENDLOOP.
      CONTINUE.
    ENDIF.

    " Real update via BAPI
    CALL FUNCTION 'BAPI_PO_CHANGE'
      EXPORTING
        purchaseorder = ls_key-ebeln
      TABLES
        return        = lt_return
        poitem        = lt_poitem
        poitemx       = lt_poitemx.

    DATA(lv_error) = abap_false.
    DATA(lv_msg)   = ``.

    " Detect hard errors (E/A/X)
    LOOP AT lt_return INTO ls_return WHERE type CA 'EAX'.
      lv_error = abap_true.
      IF lv_msg IS INITIAL.
        lv_msg = |{ ls_return-id } { ls_return-number } { ls_return-message }|.
      ELSE.
        lv_msg = |{ lv_msg }; { ls_return-message }|.
      ENDIF.
    ENDLOOP.

    IF lv_error = abap_false.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = abap_true.

      IF lt_return IS INITIAL.
        lv_msg = 'PO items closed successfully.'.
      ELSE.
        " Collect info/warning messages
        CLEAR lv_msg.
        LOOP AT lt_return INTO ls_return WHERE type = 'I' OR type = 'W'.
          IF lv_msg IS INITIAL.
            lv_msg = ls_return-message.
          ELSE.
            lv_msg = |{ lv_msg }; { ls_return-message }|.
          ENDIF.
        ENDLOOP.
        IF lv_msg IS INITIAL.
          lv_msg = 'PO items closed successfully.'.
        ENDIF.
      ENDIF.

      " Update ALV rows and write audit log
      LOOP AT lt_aff_rows INTO lv_index.
        READ TABLE gt_po INTO ls_item INDEX lv_index.
        IF sy-subrc = 0.
          ls_item-status   = 'S'.
          ls_item-message  = lv_msg.
          ls_item-sel      = 'X'.
          ls_item-open_qty = 0.
          MODIFY gt_po FROM ls_item INDEX lv_index.
          PERFORM write_log USING ls_item-ebeln ls_item-ebelp 'S' ls_item-message p_sim.
        ENDIF.
      ENDLOOP.

    ELSE.
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

      IF lv_msg IS INITIAL.
        lv_msg = 'Error during PO change.'.
      ENDIF.

      LOOP AT lt_aff_rows INTO lv_index.
        READ TABLE gt_po INTO ls_item INDEX lv_index.
        IF sy-subrc = 0.
          ls_item-status  = 'E'.
          ls_item-message = lv_msg.
          MODIFY gt_po FROM ls_item INDEX lv_index.
          PERFORM write_log USING ls_item-ebeln ls_item-ebelp 'E' ls_item-message p_sim.
        ENDIF.
      ENDLOOP.
    ENDIF.

  ENDLOOP.
ENDFORM.

"------------------------------------------------------------
" Form: write_log
" Purpose: Persist an audit trail entry for each processed item
"------------------------------------------------------------
FORM write_log USING    p_ebeln  TYPE ebeln
                        p_ebelp  TYPE ebelp
                        p_status TYPE char1
                        p_msg    TYPE string
                        p_sim    TYPE abap_bool.
  DATA ls_log TYPE zpo_close_log.

  CLEAR ls_log.
  ls_log-ebeln   = p_ebeln.
  ls_log-ebelp   = p_ebelp.
  ls_log-uname   = sy-uname.
  ls_log-erdat   = sy-datum.
  ls_log-erzet   = sy-uzeit.
  ls_log-status  = p_status.
  ls_log-message = p_msg.
  ls_log-simflag = COND char1( WHEN p_sim = 'X' THEN 'X' ELSE space ).

  INSERT zpo_close_log FROM ls_log.
  IF sy-subrc <> 0.
    " Logging errors intentionally ignored to not interrupt main flow
  ENDIF.
ENDFORM.

"------------------------------------------------------------
" Local class: SALV event handler for custom function
"------------------------------------------------------------
CLASS lcl_alv_handler DEFINITION.
  PUBLIC SECTION.
    METHODS on_added_function FOR EVENT added_function OF cl_salv_events_table
      IMPORTING e_salv_function.
ENDCLASS.

CLASS lcl_alv_handler IMPLEMENTATION.
  METHOD on_added_function.
    CASE e_salv_function.
      WHEN gc_func_close.
        " Retrieve selected rows and trigger close logic
        DATA(lt_rows) = go_sel->get_selected_rows( ).
        PERFORM close_selected USING lt_rows.

        " Try to refresh ALV to reflect changes
        TRY.
            go_alv->refresh( ).
          CATCH cx_root.
            " Ignore if refresh not supported
        ENDTRY.
      WHEN OTHERS.
        " No action
    ENDCASE.
  ENDMETHOD.
ENDCLASS.