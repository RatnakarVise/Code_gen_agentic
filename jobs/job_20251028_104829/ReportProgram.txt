REPORT zmm_close_open_po NO STANDARD PAGE HEADING.

*---------------------------------------------------------------------*
* Main Program: ZMM_CLOSE_OPEN_PO
* Description: Utility to close open POs in SAP MM
*---------------------------------------------------------------------*

"======================================================================
" Global Declarations
"======================================================================
TYPE-POOLS: slis.

" Data types (assumed DDIC structure ZSTR_PO_CLOSE contains:
" EBELN, EBELP, MATNR, LIFNR, MENGE, WEMNG, OPEN_QTY, AEDAT, FLAG_CLOSE, MESSAGE)
DATA: lt_alv   TYPE STANDARD TABLE OF zstr_po_close WITH DEFAULT KEY,
      ls_alv   TYPE zstr_po_close.

" ALV controls
DATA: ls_layout TYPE slis_layout_alv,
      lv_repid  TYPE sy-repid.

" Selection variables
DATA: lv_simulate TYPE abap_bool.

" Helper constants
CONSTANTS: gc_x TYPE c VALUE 'X',
           gc_s TYPE c VALUE 'S',
           gc_e TYPE c VALUE 'E',
           gc_a TYPE c VALUE 'A'.

" Logging structure (Assuming structure ZPO_CLOSE_LOG has following fields)
" EBELN, EBELP, UNAME, ERDAT, ERZET, STATUS, MESSAGE
DATA: ls_log TYPE zpo_close_log.

" Internal helper types for DB join result
TYPES: BEGIN OF ty_join,
         ebeln TYPE ekko-ebeln,
         ebelp TYPE ekpo-ebelp,
         lifnr TYPE ekko-lifnr,
         matnr TYPE ekpo-matnr,
         menge TYPE ekpo-menge,
         wemng TYPE ekpo-wemng,
         aedat TYPE ekko-aedat,
         elikz TYPE ekpo-elikz,
         loekz TYPE ekpo-loekz,
         werks TYPE ekpo-werks,
         ekorg TYPE ekko-ekorg,
       END OF ty_join.

DATA: lt_join TYPE STANDARD TABLE OF ty_join WITH DEFAULT KEY.

" Text Symbols (optional)
" text-001 = 'Selection'
" text-t01 = 'Open PO Items for Closure'

"======================================================================
" Selection Screen
"======================================================================
SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-001.
SELECT-OPTIONS: s_ebeln FOR ekko-ebeln,
                s_ekorg FOR ekko-ekorg,
                s_werks FOR ekpo-werks,
                s_lifnr FOR ekko-lifnr,
                s_aedat FOR ekko-aedat.
PARAMETERS: p_simul AS CHECKBOX DEFAULT 'X' USER-COMMAND sim.
SELECTION-SCREEN END OF BLOCK b1.

AT SELECTION-SCREEN.
  " Capture simulation flag from selection screen
  lv_simulate = p_simul.

"======================================================================
" Start-of-selection
"======================================================================
START-OF-SELECTION.
  " Fetch candidate PO items for closure
  PERFORM fetch_data.

  " Display message if nothing to process; otherwise show ALV
  IF lt_alv IS INITIAL.
    MESSAGE 'No open PO items found for the given selection.' TYPE 'S'.
  ELSE.
    PERFORM display_alv.
  ENDIF.

END-OF-SELECTION.
  " No further processing

"======================================================================
" ALV Display
"======================================================================
FORM display_alv.
  " Prepare ALV layout
  CLEAR ls_layout.
  lv_repid = sy-repid.
  ls_layout-box_fieldname     = 'FLAG_CLOSE'.
  ls_layout-colwidth_optimize = gc_x.
  ls_layout-zebra             = gc_x.

  " Display ALV using DDIC structure
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program       = lv_repid
      i_callback_pf_status_set = 'ALV_PF_STATUS_SET'
      i_callback_user_command  = 'ALV_USER_COMMAND'
      i_structure_name         = 'ZSTR_PO_CLOSE'
      is_layout                = ls_layout
      i_save                   = 'A'
      i_screen_start_column    = 5
      i_screen_start_line      = 5
      i_screen_end_column      = 200
      i_screen_end_line        = 25
    TABLES
      t_outtab                 = lt_alv
    EXCEPTIONS
      program_error            = 1
      OTHERS                   = 2.

  " Error handling for ALV call
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.
ENDFORM.

" Set PF-STATUS and Titlebar for ALV
FORM alv_pf_status_set USING lt_extab TYPE slis_t_extab.
  " GUI status ZMM_ALV should include:
  " - Function code 'EXEC' labeled 'Close Selected'
  " - Standard functions: BACK, EXIT, CANCEL
  SET PF-STATUS 'ZMM_ALV' EXCLUDING lt_extab.
  SET TITLEBAR 'T01'.
ENDFORM.

" Handle ALV user commands
FORM alv_user_command USING lv_ucomm    TYPE sy-ucomm
                            ls_selfield TYPE slis_selfield.
  CASE lv_ucomm.
    WHEN 'EXEC'.
      " Process closure for selected rows
      PERFORM close_selected USING ls_selfield.
      ls_selfield-refresh = gc_x. " Refresh ALV after processing
    WHEN 'BACK' OR 'EXIT' OR 'CANC'.
      LEAVE TO SCREEN 0.
  ENDCASE.
ENDFORM.

"======================================================================
" Data Fetch
"======================================================================
FORM fetch_data.
  " Initialize containers
  CLEAR lt_alv.
  CLEAR lt_join.

  " Read open PO items meeting selection criteria
  SELECT a~ebeln
         b~ebelp
         a~lifnr
         b~matnr
         b~menge
         b~wemng
         a~aedat
         b~elikz
         b~loekz
         b~werks
         a~ekorg
    FROM ekko AS a
    INNER JOIN ekpo AS b
      ON a~ebeln = b~ebeln
    INTO TABLE @lt_join
    WHERE a~ebeln IN @s_ebeln
      AND a~ekorg IN @s_ekorg
      AND a~lifnr IN @s_lifnr
      AND a~aedat IN @s_aedat
      AND b~werks IN @s_werks
      AND b~loekz = @space
      AND b~elikz = @space
      AND b~menge > b~wemng.

  " Map DB data to ALV dataset
  DATA ls_join TYPE ty_join.
  LOOP AT lt_join INTO ls_join.
    CLEAR ls_alv.
    ls_alv-ebeln     = ls_join-ebeln.
    ls_alv-ebelp     = ls_join-ebelp.
    ls_alv-lifnr     = ls_join-lifnr.
    ls_alv-matnr     = ls_join-matnr.
    ls_alv-menge     = ls_join-menge.
    ls_alv-wemng     = ls_join-wemng.
    ls_alv-open_qty  = ls_join-menge - ls_join-wemng.
    IF ls_alv-open_qty < 0.
      ls_alv-open_qty = 0.
    ENDIF.
    ls_alv-aedat      = ls_join-aedat.
    ls_alv-flag_close = space.
    CLEAR ls_alv-message.
    APPEND ls_alv TO lt_alv.
  ENDLOOP.
ENDFORM.

"======================================================================
" Closure Processing
"======================================================================
FORM close_selected USING ls_selfield TYPE slis_selfield.
  " Collect selected rows (FLAG_CLOSE = 'X')
  DATA: lt_sel TYPE STANDARD TABLE OF zstr_po_close WITH DEFAULT KEY,
        ls_sel TYPE zstr_po_close.

  LOOP AT lt_alv INTO ls_sel WHERE flag_close = gc_x.
    APPEND ls_sel TO lt_sel.
  ENDLOOP.

  " No selections -> inform user and exit
  IF lt_sel IS INITIAL.
    MESSAGE 'No items selected for closure. Please select via checkbox.' TYPE 'S'.
    RETURN.
  ENDIF.

  " Simulation mode: annotate only
  IF lv_simulate = gc_x.
    LOOP AT lt_alv INTO ls_alv WHERE flag_close = gc_x.
      ls_alv-message = 'Simulate: Would set Delivery Completed indicator (ELIKZ).'.
      MODIFY lt_alv FROM ls_alv TRANSPORTING message
        WHERE ebeln = ls_alv-ebeln AND ebelp = ls_alv-ebelp.
    ENDLOOP.
    MESSAGE 'Simulation completed. No changes were made.' TYPE 'S'.
    RETURN.
  ENDIF.

  " Group selected items by EBELN for efficient BAPI calls
  DATA: lt_unique_po TYPE SORTED TABLE OF ekko-ebeln WITH UNIQUE KEY table_line,
        lv_ebeln     TYPE ekko-ebeln.

  LOOP AT lt_sel INTO ls_sel.
    INSERT ls_sel-ebeln INTO TABLE lt_unique_po.
  ENDLOOP.

  " Track overall processing status
  DATA lv_any_error TYPE abap_bool VALUE abap_false.

  " Process each PO separately
  LOOP AT lt_unique_po INTO lv_ebeln.

    " Build BAPI item tables for current PO
    DATA: lt_poitem   TYPE TABLE OF bapimepoitem,
          lt_poitemx  TYPE TABLE OF bapimepoitemx,
          ls_poitem   TYPE bapimepoitem,
          ls_poitemx  TYPE bapimepoitemx,
          lt_return   TYPE TABLE OF bapiret2,
          ls_return   TYPE bapiret2.

    CLEAR: lt_poitem, lt_poitemx, lt_return.

    LOOP AT lt_sel INTO ls_sel WHERE ebeln = lv_ebeln.
      CLEAR: ls_poitem, ls_poitemx.
      ls_poitem-po_item      = ls_sel-ebelp.
      ls_poitem-deliv_compl  = gc_x.  " Set Delivery Completed

      ls_poitemx-po_item     = ls_sel-ebelp.
      ls_poitemx-deliv_compl = gc_x.
      ls_poitemx-updateflag  = 'U'.

      APPEND ls_poitem  TO lt_poitem.
      APPEND ls_poitemx TO lt_poitemx.
    ENDLOOP.

    " Skip if no items prepared (safety)
    IF lt_poitem IS INITIAL.
      CONTINUE.
    ENDIF.

    " Call BAPI to change PO items
    CALL FUNCTION 'BAPI_PO_CHANGE'
      EXPORTING
        purchaseorder = lv_ebeln
      TABLES
        return        = lt_return
        poitem        = lt_poitem
        poitemx       = lt_poitemx.

    " Determine if any error occurred
    DATA lv_has_error TYPE abap_bool VALUE abap_false.
    LOOP AT lt_return INTO ls_return WHERE type = gc_e OR type = gc_a.
      lv_has_error = abap_true.
      EXIT.
    ENDLOOP.

    " Commit or rollback based on error presence
    IF lv_has_error = abap_false.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = gc_x.
    ELSE.
      lv_any_error = abap_true.
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    ENDIF.

    " Prepare generic message for this PO
    DATA: lv_status TYPE c LENGTH 1,
          lv_msg    TYPE string.

    IF lv_has_error = abap_false.
      lv_status = gc_s.
      lv_msg    = 'Closed successfully via BAPI_PO_CHANGE.'.
    ELSE.
      READ TABLE lt_return INTO ls_return WITH KEY type = gc_e.
      IF sy-subrc <> 0.
        READ TABLE lt_return INTO ls_return WITH KEY type = gc_a.
      ENDIF.
      IF sy-subrc = 0.
        lv_msg = ls_return-message.
      ELSE.
        lv_msg = 'Closure failed due to unknown error.'.
      ENDIF.
      lv_status = gc_e.
    ENDIF.

    " Map item-wise messages (use RETURN-ROW to find item-specific feedback)
    DATA lv_row TYPE i.
    LOOP AT lt_poitem ASSIGNING FIELD-SYMBOL(<ls_item>) FROM 1.
      lv_row = sy-tabix.

      " Default to generic result
      DATA(lv_item_msg)  = lv_msg.
      DATA(lv_item_stat) = lv_status.

      " Try to find item-specific message in RETURN
      READ TABLE lt_return INTO ls_return
        WITH KEY type = gc_e parameter = 'POITEM' row = lv_row.
      IF sy-subrc = 0.
        lv_item_msg  = ls_return-message.
        lv_item_stat = gc_e.
      ELSE.
        READ TABLE lt_return INTO ls_return
          WITH KEY type = gc_a parameter = 'POITEM' row = lv_row.
        IF sy-subrc = 0.
          lv_item_msg  = ls_return-message.
          lv_item_stat = gc_e.
        ELSE.
          READ TABLE lt_return INTO ls_return
            WITH KEY type = gc_s parameter = 'POITEM' row = lv_row.
          IF sy-subrc = 0.
            lv_item_msg  = ls_return-message.
            lv_item_stat = gc_s.
          ENDIF.
        ENDIF.
      ENDIF.

      " Update ALV row message
      READ TABLE lt_alv INTO ls_alv
        WITH KEY ebeln = lv_ebeln ebelp = <ls_item>-po_item.
      IF sy-subrc = 0.
        ls_alv-message = lv_item_msg.
        MODIFY lt_alv FROM ls_alv TRANSPORTING message
          WHERE ebeln = ls_alv-ebeln AND ebelp = ls_alv-ebelp.
      ENDIF.

      " Write to custom log table ZPO_CLOSE_LOG
      CLEAR ls_log.
      ls_log-ebeln   = lv_ebeln.
      ls_log-ebelp   = <ls_item>-po_item.
      ls_log-uname   = sy-uname.
      ls_log-erdat   = sy-datum.
      ls_log-erzet   = sy-uzeit.
      ls_log-status  = lv_item_stat.
      ls_log-message = lv_item_msg.
      INSERT zpo_close_log FROM ls_log.
    ENDLOOP.

  ENDLOOP.

  " Final summary message
  IF lv_any_error = abap_true.
    MESSAGE 'Closure processing finished with errors. See messages.' TYPE 'S'.
  ELSE.
    MESSAGE 'Closure processing completed. Check messages per item.' TYPE 'S'.
  ENDIF.
ENDFORM.