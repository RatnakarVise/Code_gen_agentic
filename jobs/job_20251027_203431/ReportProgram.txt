REPORT zmm_close_open_po.

TYPE-POOLS: lvc.

"----------------------------------------------------------------------
" Constants
"----------------------------------------------------------------------
CONSTANTS:
  gc_stat_success TYPE c VALUE 'S',
  gc_stat_fail    TYPE c VALUE 'F'.

"----------------------------------------------------------------------
" Types
"----------------------------------------------------------------------
TYPES: BEGIN OF ts_po,
         ebeln     TYPE ebeln,
         ebelp     TYPE ebelp,
         lifnr     TYPE lifnr,
         matnr     TYPE ekpo-matnr,
         txz01     TYPE ekpo-txz01,
         werks     TYPE werks_d,
         menge     TYPE ekpo-menge,
         wemng     TYPE ekpo-wemng,
         open_qty  TYPE ekpo-menge,
         meins     TYPE ekpo-meins,
         elikz     TYPE ekpo-elikz,
         bedat     TYPE ekko-bedat,
         sel       TYPE abap_bool,   "Selection checkbox
         status    TYPE c LENGTH 1,  "Processing status S/F
         message   TYPE char255,     "Status message (fixed length for ALV)
       END OF ts_po.

"----------------------------------------------------------------------
" Global Data
"----------------------------------------------------------------------
DATA:
  lt_po     TYPE STANDARD TABLE OF ts_po WITH DEFAULT KEY,
  ls_po     TYPE ts_po,
  lt_fcat   TYPE lvc_t_fcat,
  ls_fcat   TYPE lvc_s_fcat,
  ls_layout TYPE lvc_s_layo,
  lv_repid  TYPE sy-repid VALUE sy-repid.

"----------------------------------------------------------------------
" Selection Screen
"----------------------------------------------------------------------
SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-t01.
SELECT-OPTIONS:
  s_ekorg FOR ekko-ekorg,
  s_werks FOR ekpo-werks,
  s_lifnr FOR ekko-lifnr,
  s_ebeln FOR ekko-ebeln,
  s_bedat FOR ekko-bedat.
PARAMETERS:
  p_sim AS CHECKBOX DEFAULT abap_true USER-COMMAND upd MODIF ID sim. "Simulation mode
SELECTION-SCREEN END OF BLOCK b1.

INITIALIZATION.
  "Initialize block title
  text-t01 = 'Selection Criteria'.

AT SELECTION-SCREEN.
  "Optional: add validations for the selection if needed

"----------------------------------------------------------------------
" Main Flow
"----------------------------------------------------------------------
START-OF-SELECTION.
  "1) Fetch open PO items based on selection
  PERFORM fetch_open_pos.

  "Exit if nothing to process
  IF lt_po IS INITIAL.
    MESSAGE 'No open PO items found for selection.' TYPE 'S'.
    RETURN.
  ENDIF.

  "2) Let user select items in ALV
  PERFORM alv_display.

  "3) Process user selection (simulate or update)
  PERFORM process_selection.

"----------------------------------------------------------------------
" Form: fetch_open_pos
" Purpose: Read open PO items and prepare ALV dataset
"----------------------------------------------------------------------
FORM fetch_open_pos.
  DATA: lt_data TYPE STANDARD TABLE OF ts_po,
        ls_data TYPE ts_po.

  "Read EKKO/EKPO for open items (not delivery completed, not deleted)
  SELECT e~ebeln,
         p~ebelp,
         e~lifnr,
         p~matnr,
         p~txz01,
         p~werks,
         p~menge,
         p~wemng,
         p~meins,
         p~elikz,
         e~bedat
    FROM ekko AS e
    INNER JOIN ekpo AS p
      ON p~ebeln = e~ebeln
    INTO CORRESPONDING FIELDS OF TABLE @lt_data
   WHERE e~ebeln IN @s_ebeln
     AND e~ekorg IN @s_ekorg
     AND e~lifnr IN @s_lifnr
     AND e~bedat IN @s_bedat
     AND p~werks IN @s_werks
     AND p~elikz <> @abap_true
     AND p~loekz = @space.

  "Compute open quantity and keep only positive open qty
  LOOP AT lt_data INTO ls_data.
    ls_data-open_qty = ls_data-menge - ls_data-wemng.
    IF ls_data-open_qty > 0.
      APPEND ls_data TO lt_po.
    ENDIF.
  ENDLOOP.

  SORT lt_po BY ebeln ebelp.
ENDFORM.

"----------------------------------------------------------------------
" Form: process_selection
" Purpose: Execute simulation or actual closing for selected items
"----------------------------------------------------------------------
FORM process_selection.
  DATA: lt_selected TYPE STANDARD TABLE OF ts_po,
        ls_selected TYPE ts_po.

  "Collect selected lines
  LOOP AT lt_po INTO ls_po WHERE sel = abap_true.
    APPEND ls_po TO lt_selected.
  ENDLOOP.

  IF lt_selected IS INITIAL.
    MESSAGE 'No items selected for closure.' TYPE 'S'.
    RETURN.
  ENDIF.

  "Process each selected item
  LOOP AT lt_po ASSIGNING FIELD-SYMBOL(<ls_po>) WHERE sel = abap_true.

    "Skip if already delivery completed
    IF <ls_po>-elikz = abap_true.
      <ls_po>-status  = gc_stat_fail.
      <ls_po>-message = 'Already delivery-completed.'.
      CONTINUE.
    ENDIF.

    "Skip if no open quantity
    IF <ls_po>-open_qty <= 0.
      <ls_po>-status  = gc_stat_fail.
      <ls_po>-message = 'No open quantity to close.'.
      CONTINUE.
    ENDIF.

    "Simulation mode: do not call BAPI
    IF p_sim = abap_true.
      <ls_po>-status  = gc_stat_success.
      <ls_po>-message = 'Simulated: Delivery completed flag would be set.'.
      CONTINUE.
    ENDIF.

    "Actual update via BAPI
    PERFORM close_po_item USING    <ls_po>-ebeln
                                   <ls_po>-ebelp
                          CHANGING <ls_po>-status
                                   <ls_po>-message.

    "Persist result in application log table
    PERFORM log_result USING <ls_po>-ebeln
                             <ls_po>-ebelp
                             <ls_po>-status
                             <ls_po>-message.
  ENDLOOP.

  "Refresh ALV to show final statuses/messages
  PERFORM alv_display_after_processing.
ENDFORM.

"----------------------------------------------------------------------
" Form: close_po_item
" Purpose: Set delivery-completed indicator (NO_MORE_GR) via BAPI
"----------------------------------------------------------------------
FORM close_po_item USING    iv_ebeln    TYPE ebeln
                            iv_ebelp    TYPE ebelp
                   CHANGING ev_status   TYPE c
                            ev_message  TYPE char255.

  DATA: lt_return   TYPE TABLE OF bapiret2,
        ls_return   TYPE bapiret2,
        lt_poitem   TYPE TABLE OF bapimepoitem,
        ls_poitem   TYPE bapimepoitem,
        lt_poitemx  TYPE TABLE OF bapimepoitemx,
        ls_poitemx  TYPE bapimepoitemx,
        lv_error    TYPE abap_bool,
        lv_msg      TYPE char255.

  CLEAR: ev_status, ev_message, lv_error, lv_msg.

  "Prepare item for update
  CLEAR ls_poitem.
  ls_poitem-po_item    = iv_ebelp.
  ls_poitem-no_more_gr = abap_true. "Set delivery completed
  APPEND ls_poitem TO lt_poitem.

  "Prepare X-structure
  CLEAR ls_poitemx.
  ls_poitemx-po_item     = iv_ebelp.
  ls_poitemx-no_more_gr  = abap_true.
  ls_poitemx-updateflag  = 'U'.
  APPEND ls_poitemx TO lt_poitemx.

  "Execute BAPI change
  CALL FUNCTION 'BAPI_PO_CHANGE'
    EXPORTING
      purchaseorder = iv_ebeln
    TABLES
      return        = lt_return
      poitem        = lt_poitem
      poitemx       = lt_poitemx.

  "Analyze BAPI return messages
  LOOP AT lt_return INTO ls_return.
    IF ls_return-type = 'E' OR ls_return-type = 'A'.
      lv_error = abap_true.
    ENDIF.
    IF lv_msg IS INITIAL.
      lv_msg = ls_return-message.
    ELSE.
      CONCATENATE lv_msg ls_return-message INTO lv_msg SEPARATED BY space.
    ENDIF.
  ENDLOOP.

  IF lv_error = abap_false.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = abap_true.
    ev_status  = gc_stat_success.
    IF lv_msg IS INITIAL.
      ev_message = 'Delivery completed indicator set successfully.'.
    ELSE.
      ev_message = lv_msg.
    ENDIF.
  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    ev_status  = gc_stat_fail.
    IF lv_msg IS INITIAL.
      ev_message = 'Error while setting delivery completed indicator.'.
    ELSE.
      ev_message = lv_msg.
    ENDIF.
  ENDIF.

ENDFORM.

"----------------------------------------------------------------------
" Form: log_result
" Purpose: Upsert processing result into custom log table ZPO_CLOSE_LOG
" Note: Assumes ZPO_CLOSE_LOG exists with matching fields
"----------------------------------------------------------------------
FORM log_result USING iv_ebeln  TYPE ebeln
                      iv_ebelp  TYPE ebelp
                      iv_status TYPE c
                      iv_msg    TYPE char255.

  DATA: ls_log TYPE zpo_close_log.

  CLEAR ls_log.
  ls_log-ebeln   = iv_ebeln.
  ls_log-ebelp   = iv_ebelp.
  ls_log-ernam   = sy-uname.
  ls_log-erdat   = sy-datum.
  ls_log-erzet   = sy-uzeit.
  ls_log-status  = iv_status.
  ls_log-message = iv_msg.

  "Try UPDATE first (by table key), INSERT if not existing
  UPDATE zpo_close_log FROM ls_log.
  IF sy-subrc <> 0.
    INSERT zpo_close_log FROM ls_log.
  ENDIF.

ENDFORM.

"----------------------------------------------------------------------
" Form: alv_build_fieldcat
" Purpose: Build LVC field catalog and layout
"----------------------------------------------------------------------
FORM alv_build_fieldcat.
  CLEAR lt_fcat.

  "Selection checkbox
  CLEAR ls_fcat.
  ls_fcat-fieldname  = 'SEL'.
  ls_fcat-scrtext_l  = 'Select'.
  ls_fcat-scrtext_m  = 'Sel'.
  ls_fcat-scrtext_s  = 'Sel'.
  ls_fcat-checkbox   = abap_true.
  ls_fcat-edit       = abap_true.
  ls_fcat-outputlen  = 5.
  APPEND ls_fcat TO lt_fcat.

  "PO number
  CLEAR ls_fcat.
  ls_fcat-fieldname  = 'EBELN'.
  ls_fcat-scrtext_l  = 'PO Number'.
  ls_fcat-outputlen  = 10.
  APPEND ls_fcat TO lt_fcat.

  "PO item
  CLEAR ls_fcat.
  ls_fcat-fieldname  = 'EBELP'.
  ls_fcat-scrtext_l  = 'Item'.
  ls_fcat-outputlen  = 5.
  APPEND ls_fcat TO lt_fcat.

  "Vendor
  CLEAR ls_fcat.
  ls_fcat-fieldname  = 'LIFNR'.
  ls_fcat-scrtext_l  = 'Vendor'.
  ls_fcat-outputlen  = 10.
  APPEND ls_fcat TO lt_fcat.

  "Material
  CLEAR ls_fcat.
  ls_fcat-fieldname  = 'MATNR'.
  ls_fcat-scrtext_l  = 'Material'.
  ls_fcat-outputlen  = 18.
  APPEND ls_fcat TO lt_fcat.

  "Short text
  CLEAR ls_fcat.
  ls_fcat-fieldname  = 'TXZ01'.
  ls_fcat-scrtext_l  = 'Short Text'.
  ls_fcat-outputlen  = 30.
  APPEND ls_fcat TO lt_fcat.

  "Plant
  CLEAR ls_fcat.
  ls_fcat-fieldname  = 'WERKS'.
  ls_fcat-scrtext_l  = 'Plant'.
  ls_fcat-outputlen  = 4.
  APPEND ls_fcat TO lt_fcat.

  "Ordered quantity
  CLEAR ls_fcat.
  ls_fcat-fieldname  = 'MENGE'.
  ls_fcat-scrtext_l  = 'Ordered Qty'.
  ls_fcat-outputlen  = 13.
  ls_fcat-qfieldname = 'MEINS'.
  APPEND ls_fcat TO lt_fcat.

  "Received quantity
  CLEAR ls_fcat.
  ls_fcat-fieldname  = 'WEMNG'.
  ls_fcat-scrtext_l  = 'Received Qty'.
  ls_fcat-outputlen  = 13.
  ls_fcat-qfieldname = 'MEINS'.
  APPEND ls_fcat TO lt_fcat.

  "Open quantity
  CLEAR ls_fcat.
  ls_fcat-fieldname  = 'OPEN_QTY'.
  ls_fcat-scrtext_l  = 'Open Qty'.
  ls_fcat-outputlen  = 13.
  ls_fcat-qfieldname = 'MEINS'.
  APPEND ls_fcat TO lt_fcat.

  "UoM
  CLEAR ls_fcat.
  ls_fcat-fieldname  = 'MEINS'.
  ls_fcat-scrtext_l  = 'UoM'.
  ls_fcat-outputlen  = 3.
  APPEND ls_fcat TO lt_fcat.

  "PO Date
  CLEAR ls_fcat.
  ls_fcat-fieldname  = 'BEDAT'.
  ls_fcat-scrtext_l  = 'PO Date'.
  ls_fcat-outputlen  = 10.
  APPEND ls_fcat TO lt_fcat.

  "Status
  CLEAR ls_fcat.
  ls_fcat-fieldname  = 'STATUS'.
  ls_fcat-scrtext_l  = 'Status'.
  ls_fcat-outputlen  = 6.
  APPEND ls_fcat TO lt_fcat.

  "Status message
  CLEAR ls_fcat.
  ls_fcat-fieldname  = 'MESSAGE'.
  ls_fcat-scrtext_l  = 'Status Message'.
  ls_fcat-outputlen  = 60.
  APPEND ls_fcat TO lt_fcat.

  "Layout
  CLEAR ls_layout.
  ls_layout-zebra     = abap_true.
  ls_layout-box_fname = 'SEL'.
ENDFORM.

"----------------------------------------------------------------------
" Form: alv_display
" Purpose: Show initial list for user selection
"----------------------------------------------------------------------
FORM alv_display.
  PERFORM alv_build_fieldcat.

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC'
    EXPORTING
      i_callback_program = lv_repid
      is_layout_lvc      = ls_layout
      it_fieldcat_lvc    = lt_fcat
      i_save             = 'A'
    TABLES
      t_outtab           = lt_po
    EXCEPTIONS
      program_error      = 1
      OTHERS             = 2.

  IF sy-subrc <> 0.
    MESSAGE 'Error displaying ALV.' TYPE 'S'.
  ENDIF.
ENDFORM.

"----------------------------------------------------------------------
" Form: alv_display_after_processing
" Purpose: Re-display list after processing to show results
"----------------------------------------------------------------------
FORM alv_display_after_processing.
  PERFORM alv_display.
ENDFORM.