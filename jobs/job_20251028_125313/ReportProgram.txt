REPORT zmm_close_open_po.

"--------------------------------------------------------------------------------
" Types and global data
"--------------------------------------------------------------------------------

" Local class forward declaration for ALV event handler
CLASS lcl_alv_handler DEFINITION DEFERRED.

" Metadata for PO items (subset for quick access)
TYPES: BEGIN OF ty_po_meta,
         ebeln TYPE ebeln,
         ebelp TYPE ebelp,
         bsart TYPE bsart,
       END OF ty_po_meta.

" Authorization cache by PO type
TYPES: BEGIN OF ty_auth_cache,
         bsart      TYPE bsart,
         can_change TYPE abap_bool,
       END OF ty_auth_cache.

" ALV data and caches
DATA: lt_po_alv     TYPE STANDARD TABLE OF zstr_po_close WITH DEFAULT KEY,
      ls_po_alv     TYPE zstr_po_close,
      lt_po_meta    TYPE HASHED TABLE OF ty_po_meta WITH UNIQUE KEY ebeln ebelp,
      ls_po_meta    TYPE ty_po_meta,
      lt_auth_cache TYPE HASHED TABLE OF ty_auth_cache WITH UNIQUE KEY bsart,
      ls_auth_cache TYPE ty_auth_cache.

" SALV references
DATA: go_alv         TYPE REF TO cl_salv_table,
      go_events      TYPE REF TO cl_salv_events_table,
      go_alv_handler TYPE REF TO lcl_alv_handler.

" Custom ALV function code for "Close Selected"
CONSTANTS: gc_fc_close TYPE syucomm VALUE 'ZCLOSE'.

" Simulation mode snapshot
DATA: lv_simulate TYPE abap_bool.

"--------------------------------------------------------------------------------
" Selection screen
"--------------------------------------------------------------------------------
SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-t01.
SELECT-OPTIONS: s_ebeln FOR ekko-ebeln,
                s_ekorg FOR ekko-ekorg,
                s_werks FOR ekpo-werks,
                s_lifnr FOR ekko-lifnr,
                s_aedat FOR ekko-aedat.
PARAMETERS: p_sim AS CHECKBOX DEFAULT 'X' USER-COMMAND ucom.
SELECTION-SCREEN END OF BLOCK b1.

INITIALIZATION.
  " Set block title
  text-t01 = 'PO Selection'.

AT SELECTION-SCREEN.
  " Snapshot simulation flag
  lv_simulate = xsdbool( p_sim = abap_true ).

"--------------------------------------------------------------------------------
" Start-of-selection
"--------------------------------------------------------------------------------
START-OF-SELECTION.
  PERFORM fetch_open_pos.   " Load open PO items
  PERFORM display_alv.      " Show ALV and enable processing

"--------------------------------------------------------------------------------
" Local classes
"--------------------------------------------------------------------------------
CLASS lcl_alv_handler DEFINITION.
  PUBLIC SECTION.
    METHODS on_user_command FOR EVENT added_function OF cl_salv_events_table
      IMPORTING e_salv_function.
ENDCLASS.

CLASS lcl_alv_handler IMPLEMENTATION.
  METHOD on_user_command.
    " React to custom ALV function
    CASE e_salv_function.
      WHEN gc_fc_close.
        PERFORM process_selected USING lv_simulate.
      WHEN OTHERS.
        " no-op
    ENDCASE.
  ENDMETHOD.
ENDCLASS.

"--------------------------------------------------------------------------------
" Forms
"--------------------------------------------------------------------------------

FORM fetch_open_pos.
  " Initialize containers
  CLEAR: lt_po_alv, lt_po_meta.
  FREE:  lt_po_alv, lt_po_meta.

  " Fetch open PO items by selection criteria
  SELECT a~ebeln,
         a~bsart,
         a~lifnr,
         a~aedat,
         b~ebelp,
         b~matnr,
         b~menge,
         b~wemng
    FROM ekko AS a
    INNER JOIN ekpo AS b
      ON a~ebeln = b~ebeln
    INTO TABLE @DATA(lt_db)
    WHERE a~ebeln IN @s_ebeln
      AND a~ekorg IN @s_ekorg
      AND a~lifnr IN @s_lifnr
      AND a~aedat IN @s_aedat
      AND b~werks IN @s_werks
      AND b~loekz = @space         " Not deleted
      AND b~elikz = @space.        " Not delivery-completed

  IF sy-subrc <> 0 OR lt_db IS INITIAL.
    MESSAGE 'No PO items found for given selection.' TYPE 'I'.
    RETURN.
  ENDIF.

  " Build ALV table and meta cache; only items with open quantity
  LOOP AT lt_db ASSIGNING FIELD-SYMBOL(<ls_db>).
    DATA(lv_open) = <ls_db>-menge - <ls_db>-wemng.
    IF lv_open <= 0.
      CONTINUE.
    ENDIF.

    CLEAR ls_po_alv.
    ls_po_alv-ebeln      = <ls_db>-ebeln.
    ls_po_alv-ebelp      = <ls_db>-ebelp.
    ls_po_alv-lifnr      = <ls_db>-lifnr.
    ls_po_alv-matnr      = <ls_db>-matnr.
    ls_po_alv-menge      = <ls_db>-menge.
    ls_po_alv-wemng      = <ls_db>-wemng.
    ls_po_alv-open_qty   = lv_open.
    ls_po_alv-aedat      = <ls_db>-aedat.
    ls_po_alv-flag_close = space.
    APPEND ls_po_alv TO lt_po_alv.

    ls_po_meta-ebeln = <ls_db>-ebeln.
    ls_po_meta-ebelp = <ls_db>-ebelp.
    ls_po_meta-bsart = <ls_db>-bsart.
    INSERT ls_po_meta INTO TABLE lt_po_meta.
  ENDLOOP.

  " Present items ordered by PO/item
  SORT lt_po_alv BY ebeln ebelp.
ENDFORM.

FORM process_selected USING iv_simulate TYPE abap_bool.
  " Ensure ALV is available
  CHECK go_alv IS BOUND.

  " Get selected row indices from ALV
  DATA(lo_selection) = go_alv->get_selections( ).
  DATA(lt_selected_rows) = lo_selection->get_selected_rows( ).

  IF lt_selected_rows IS INITIAL.
    MESSAGE 'Please select at least one row in ALV to process.' TYPE 'S' DISPLAY LIKE 'E'.
    RETURN.
  ENDIF.

  " Build list of selected (EBELN, EBELP)
  TYPES: BEGIN OF lty_key,
           ebeln TYPE ebeln,
           ebelp TYPE ebelp,
         END OF lty_key.
  DATA: lt_to_close TYPE STANDARD TABLE OF lty_key WITH DEFAULT KEY.

  LOOP AT lt_selected_rows ASSIGNING FIELD-SYMBOL(<lv_row_idx>).
    READ TABLE lt_po_alv ASSIGNING FIELD-SYMBOL(<ls_row>) INDEX <lv_row_idx>.
    IF sy-subrc = 0.
      APPEND VALUE lty_key( ebeln = <ls_row>-ebeln ebelp = <ls_row>-ebelp ) TO lt_to_close.
      <ls_row>-flag_close = abap_true.
    ENDIF.
  ENDLOOP.

  IF lt_to_close IS INITIAL.
    MESSAGE 'Selected rows could not be read. Nothing to process.' TYPE 'S' DISPLAY LIKE 'E'.
    RETURN.
  ENDIF.

  " Group selected items per PO for single BAPI calls
  TYPES: BEGIN OF lty_group,
           ebeln  TYPE ebeln,
           t_ebelp TYPE STANDARD TABLE OF ebelp WITH DEFAULT KEY,
         END OF lty_group.
  DATA: lt_group   TYPE STANDARD TABLE OF lty_group WITH DEFAULT KEY,
        lt_uniq_po TYPE SORTED TABLE OF ebeln WITH UNIQUE KEY table_line.

  LOOP AT lt_to_close ASSIGNING FIELD-SYMBOL(<ls_key>).
    INSERT <ls_key>-ebeln INTO TABLE lt_uniq_po.
  ENDLOOP.

  LOOP AT lt_uniq_po ASSIGNING FIELD-SYMBOL(<lv_ebeln>).
    DATA(ls_group) = VALUE lty_group( ebeln = <lv_ebeln> ).
    LOOP AT lt_to_close ASSIGNING <ls_key> WHERE ebeln = <lv_ebeln>.
      INSERT <ls_key>-ebelp INTO TABLE ls_group-t_ebelp.
    ENDLOOP.
    APPEND ls_group TO lt_group.
  ENDLOOP.

  " Process each PO group via BAPI (or simulate)
  LOOP AT lt_group ASSIGNING FIELD-SYMBOL(<ls_group>).

    " Authorization check for PO type (BSART) with cache
    DATA(lv_first_ebelp) = VALUE ebelp( ).
    READ TABLE <ls_group>-t_ebelp INDEX 1 INTO lv_first_ebelp.
    IF lv_first_ebelp IS INITIAL.
      CONTINUE.
    ENDIF.

    READ TABLE lt_po_meta ASSIGNING FIELD-SYMBOL(<ls_meta>)
         WITH TABLE KEY ebeln = <ls_group>-ebeln ebelp = lv_first_ebelp.
    IF <ls_meta> IS ASSIGNED.
      READ TABLE lt_auth_cache INTO ls_auth_cache WITH TABLE KEY bsart = <ls_meta>-bsart.
      IF sy-subrc <> 0.
        CLEAR ls_auth_cache.
        ls_auth_cache-bsart = <ls_meta>-bsart.
        AUTHORITY-CHECK OBJECT 'M_BEST_BSA'
          ID 'BSART' FIELD <ls_meta>-bsart
          ID 'ACTVT' FIELD '02'.  " Change
        ls_auth_cache-can_change = xsdbool( sy-subrc = 0 ).
        INSERT ls_auth_cache INTO TABLE lt_auth_cache.
      ENDIF.

      IF ls_auth_cache-can_change = abap_false AND iv_simulate = abap_false.
        LOOP AT <ls_group>-t_ebelp ASSIGNING FIELD-SYMBOL(<lv_ebelp_fail>).
          PERFORM update_result_message USING <ls_group>-ebeln <lv_ebelp_fail> abap_false |Not authorized for PO type| iv_simulate.
        ENDLOOP.
        CONTINUE.
      ENDIF.
    ENDIF.

    " Build BAPI change tables (only if not in simulation)
    DATA(lt_poitem)  = VALUE STANDARD TABLE OF bapimepoitem( ).
    DATA(lt_poitemx) = VALUE STANDARD TABLE OF bapimepoitemx( ).

    LOOP AT <ls_group>-t_ebelp ASSIGNING FIELD-SYMBOL(<lv_ebelp>).
      READ TABLE lt_po_alv ASSIGNING FIELD-SYMBOL(<ls_alv_row>)
           WITH KEY ebeln = <ls_group>-ebeln ebelp = <lv_ebelp>.
      IF sy-subrc <> 0.
        CONTINUE.
      ENDIF.

      IF iv_simulate = abap_false.
        APPEND VALUE bapimepoitem(
                  po_item     = <lv_ebelp>
                  deliv_compl = abap_true ) TO lt_poitem.
        APPEND VALUE bapimepoitemx(
                  po_item     = <lv_ebelp>
                  deliv_compl = abap_true
                  updateflag  = 'U' ) TO lt_poitemx.
      ENDIF.
    ENDLOOP.

    DATA(lv_commit_ok) = abap_true.
    DATA(lt_return)    TYPE STANDARD TABLE OF bapiret2 WITH DEFAULT KEY.

    IF iv_simulate = abap_false AND lt_poitem IS NOT INITIAL.
      " Execute change
      CALL FUNCTION 'BAPI_PO_CHANGE'
        EXPORTING
          purchaseorder = <ls_group>-ebeln
        TABLES
          poitem        = lt_poitem
          poitemx       = lt_poitemx
          return        = lt_return.

      " Analyze BAPI return messages
      DATA(lv_err_found) = abap_false.
      DATA(lv_msg_all)   TYPE string.
      LOOP AT lt_return ASSIGNING FIELD-SYMBOL(<ls_ret>).
        IF <ls_ret>-type = 'E' OR <ls_ret>-type = 'A'.
          lv_err_found = abap_true.
        ENDIF.
        IF lv_msg_all IS INITIAL.
          lv_msg_all = |{ <ls_ret>-type } { <ls_ret>-message }|.
        ELSE.
          lv_msg_all = |{ lv_msg_all } / { <ls_ret>-type } { <ls_ret>-message }|.
        ENDIF.
      ENDLOOP.

      " Commit or rollback
      IF lv_err_found = abap_true.
        CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
        lv_commit_ok = abap_false.
      ELSE.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = abap_true.
        lv_commit_ok = abap_true.
      ENDIF.

      " Update result messages in ALV and audit log
      LOOP AT <ls_group>-t_ebelp ASSIGNING <lv_ebelp>.
        IF lv_commit_ok = abap_true.
          PERFORM update_result_message USING <ls_group>-ebeln <lv_ebelp> abap_true  'Closed (Delivery Completed set)' iv_simulate.
        ELSE.
          DATA(lv_msg) = COND string( WHEN lv_msg_all IS INITIAL THEN 'Closure failed' ELSE lv_msg_all ).
          PERFORM update_result_message USING <ls_group>-ebeln <lv_ebelp> abap_false lv_msg iv_simulate.
        ENDIF.
      ENDLOOP.

    ELSEIF iv_simulate = abap_false AND lt_poitem IS INITIAL.
      " Nothing to update for this PO
      LOOP AT <ls_group>-t_ebelp ASSIGNING <lv_ebelp>.
        PERFORM update_result_message USING <ls_group>-ebeln <lv_ebelp> abap_false 'No updatable items for this PO' iv_simulate.
      ENDLOOP.

    ELSE.
      " Simulation mode: no update, just mark as simulated
      LOOP AT <ls_group>-t_ebelp ASSIGNING <lv_ebelp>.
        PERFORM update_result_message USING <ls_group>-ebeln <lv_ebelp> abap_true 'Simulated - no update performed' iv_simulate.
      ENDLOOP.
    ENDIF.

  ENDLOOP.

  " Refresh ALV display after processing
  IF go_alv IS BOUND.
    TRY.
        go_alv->refresh( ).
      CATCH cx_salv_msg.
        " Ignore refresh errors
    ENDTRY.
  ENDIF.
ENDFORM.

FORM update_result_message USING    iv_ebeln     TYPE ebeln
                                    iv_ebelp     TYPE ebelp
                                    iv_success   TYPE abap_bool
                                    iv_message   TYPE string
                                    iv_simulate  TYPE abap_bool.
  " Update ALV row with message and adjust open qty on success (non-simulated)
  READ TABLE lt_po_alv ASSIGNING FIELD-SYMBOL(<ls_row>) WITH KEY ebeln = iv_ebeln ebelp = iv_ebelp.
  IF sy-subrc = 0.
    <ls_row>-message = iv_message.
    IF iv_success = abap_true AND iv_simulate = abap_false.
      <ls_row>-open_qty = 0.
    ENDIF.
  ENDIF.

  " Persist audit log only when executing real changes
  IF iv_simulate = abap_false.
    DATA(ls_log) = VALUE zpo_close_log(
                     mandt   = sy-mandt
                     ebeln   = iv_ebeln
                     ebelp   = iv_ebelp
                     ernam   = sy-uname
                     erdat   = sy-datum
                     erzet   = sy-uzeit
                     status  = COND #( WHEN iv_success = abap_true THEN 'S' ELSE 'F' )
                     message = iv_message ).
    " Try INSERT, if exists then MODIFY
    INSERT zpo_close_log FROM ls_log.
    IF sy-subrc <> 0.
      MODIFY zpo_close_log FROM ls_log.
    ENDIF.
  ENDIF.
ENDFORM.

FORM display_alv.
  " Build SALV for result list
  TRY.
      cl_salv_table=>factory(
        IMPORTING
          r_salv_table = go_alv
        CHANGING
          t_table      = lt_po_alv ).

      " Enable multi-row selection
      go_alv->get_selections( )->set_selection_mode( if_salv_c_selection_mode=>multiple_row ).

      " Enable standard functions
      go_alv->get_functions( )->set_all( abap_true ).

      " Use custom PF-STATUS with a function button for 'ZCLOSE'
      go_alv->set_screen_status(
        pfstatus      = 'ZMM_CLOSE_PO'
        report        = sy-repid
        set_functions = if_salv_c_bool_sap=>true ).

      " Register event handler (keep reference globally)
      go_events      = go_alv->get_event( ).
      IF go_alv_handler IS INITIAL.
        CREATE OBJECT go_alv_handler.
      ENDIF.
      SET HANDLER go_alv_handler->on_user_command FOR go_events.

      " Optimize and label columns
      DATA(lo_cols) = go_alv->get_columns( ).
      lo_cols->set_optimize( abap_true ).
      TRY.
          lo_cols->get_column( 'EBELN' )->set_long_text( 'PO Number' ).
          lo_cols->get_column( 'EBELP' )->set_long_text( 'Item' ).
          lo_cols->get_column( 'LIFNR' )->set_long_text( 'Vendor' ).
          lo_cols->get_column( 'MATNR' )->set_long_text( 'Material' ).
          lo_cols->get_column( 'MENGE' )->set_long_text( 'Order Qty' ).
          lo_cols->get_column( 'WEMNG' )->set_long_text( 'GR Qty' ).
          lo_cols->get_column( 'OPEN_QTY' )->set_long_text( 'Open Qty' ).
          lo_cols->get_column( 'AEDAT' )->set_long_text( 'Last Change Date' ).
          lo_cols->get_column( 'FLAG_CLOSE' )->set_long_text( 'Closure Flag' ).
          lo_cols->get_column( 'MESSAGE' )->set_long_text( 'Status Message' ).
        CATCH cx_salv_not_found.
          " Ignore missing columns
      ENDTRY.

      " Display ALV
      go_alv->display( ).

    CATCH cx_salv_msg INTO DATA(lx_msg).
      MESSAGE lx_msg->get_text( ) TYPE 'E'.
  ENDTRY.
ENDFORM.