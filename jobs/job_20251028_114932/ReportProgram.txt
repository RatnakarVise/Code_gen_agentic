REPORT zmm_close_open_po.

*----------------------------------------------------------------------*
* Report: ZMM_CLOSE_OPEN_PO
* Description: Utility to identify and close open PO items via ALV.
* Data Sources: EKKO (PO Header), EKPO (PO Item), ZPO_CLOSE_LOG (Audit)
* BAPIs: BAPI_PO_CHANGE, BAPI_TRANSACTION_COMMIT
*----------------------------------------------------------------------*

*----------------------------------------------------------------------*
* Global Declarations
*----------------------------------------------------------------------*
TYPE-POOLS: slis.

CONSTANTS:
  gc_actvt_change TYPE c       VALUE '02',
  gc_stat_success TYPE char10  VALUE 'SUCCESS',
  gc_stat_failed  TYPE char10  VALUE 'FAILED',
  gc_stat_closed  TYPE char10  VALUE 'CLOSED',
  gc_stat_sim     TYPE char10  VALUE 'SIMULATED'.

TYPES: BEGIN OF ty_po_close,
         ebeln        TYPE ekko-ebeln,      "PO Number
         ebelp        TYPE ekpo-ebelp,      "PO Item
         lifnr        TYPE ekko-lifnr,      "Vendor
         matnr        TYPE ekpo-matnr,      "Material
         ekorg        TYPE ekko-ekorg,      "Purchasing Org (for info)
         werks        TYPE ekpo-werks,      "Plant (for info)
         bsart        TYPE ekko-bsart,      "PO Type (auth check)
         order_qty    TYPE ekpo-menge,      "Ordered Qty
         gr_qty       TYPE ekpo-wemng,      "Goods Received Qty
         open_qty     TYPE ekpo-menge,      "Open Qty = order - GR
         last_chg_dt  TYPE ekpo-aedat,      "Last Change Date
         sel          TYPE c LENGTH 1,      "Closure Flag (User Select)
         status_code  TYPE char10,          "Status (CLOSED/FAILED/SIMULATED)
         status_msg   TYPE char255,         "Status Message
       END OF ty_po_close.

DATA:
  gt_alv      TYPE STANDARD TABLE OF ty_po_close WITH DEFAULT KEY,
  gs_alv      TYPE ty_po_close,
  gt_fieldcat TYPE slis_t_fieldcat_alv,
  gs_fieldcat TYPE slis_fieldcat_alv,
  gs_layout   TYPE slis_layout_alv,
  gt_sort     TYPE slis_t_sortinfo_alv,
  gs_sort     TYPE slis_sortinfo_alv,
  gv_repid    TYPE sy-repid VALUE sy-repid.

DATA:
  gt_return   TYPE STANDARD TABLE OF bapiret2,
  gs_return   TYPE bapiret2,
  gt_poitem   TYPE STANDARD TABLE OF bapimepoitem,
  gs_poitem   TYPE bapimepoitem,
  gt_poitemx  TYPE STANDARD TABLE OF bapimepoitemx,
  gs_poitemx  TYPE bapimepoitemx.

* Work area for custom log table (assumes DDIC table exists)
DATA: gs_log TYPE zpo_close_log.

*----------------------------------------------------------------------*
* Selection Screen
*----------------------------------------------------------------------*
SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-001.
SELECT-OPTIONS:
  s_ebeln FOR ekko-ebeln,
  s_bedat FOR ekko-bedat.
SELECT-OPTIONS:
  s_ekorg FOR ekko-ekorg,
  s_werks FOR ekpo-werks,
  s_lifnr FOR ekko-lifnr.
PARAMETERS:
  p_sim TYPE boole_d AS CHECKBOX DEFAULT abap_true. "Simulate Mode
SELECTION-SCREEN END OF BLOCK b1.

SELECTION-SCREEN COMMENT /1(79) text-002.

* Text Elements:
* text-001 = Selection Criteria
* text-002 = Use ALV 'Save' button to close selected items (or Back to exit).

*----------------------------------------------------------------------*
* Start-of-Selection
*----------------------------------------------------------------------*
START-OF-SELECTION.
  PERFORM select_data.
  IF gt_alv IS INITIAL.
    MESSAGE 'No open PO items found for given selection.' TYPE 'S'.
    EXIT.
  ENDIF.
  PERFORM build_fieldcatalog.
  PERFORM build_sort.
  PERFORM display_alv.

*----------------------------------------------------------------------*
* Form Routines
*----------------------------------------------------------------------*

FORM select_data.
* Select open PO items based on selection criteria and prepare ALV data
  CLEAR gt_alv.

  SELECT
    k~ebeln,
    p~ebelp,
    k~lifnr,
    p~matnr,
    k~ekorg,
    p~werks,
    k~bsart,
    p~menge,
    p~wemng,
    p~aedat
    FROM ekko AS k
    INNER JOIN ekpo AS p
      ON p~ebeln = k~ebeln
    INTO TABLE @DATA(lt_join)
    WHERE k~ebeln IN @s_ebeln
      AND k~bedat IN @s_bedat
      AND k~ekorg IN @s_ekorg
      AND k~lifnr IN @s_lifnr
      AND p~werks IN @s_werks
      AND p~loekz <> 'L'           "Not deleted
      AND p~elikz <> 'X'.          "Not delivery completed

  IF sy-subrc <> 0 OR lt_join IS INITIAL.
    RETURN.
  ENDIF.

  LOOP AT lt_join ASSIGNING FIELD-SYMBOL(<ls_join>).
    CLEAR gs_alv.
    gs_alv-ebeln       = <ls_join>-ebeln.
    gs_alv-ebelp       = <ls_join>-ebelp.
    gs_alv-lifnr       = <ls_join>-lifnr.
    gs_alv-matnr       = <ls_join>-matnr.
    gs_alv-ekorg       = <ls_join>-ekorg.
    gs_alv-werks       = <ls_join>-werks.
    gs_alv-bsart       = <ls_join>-bsart.
    gs_alv-order_qty   = <ls_join>-menge.
    gs_alv-gr_qty      = <ls_join>-wemng.
    gs_alv-open_qty    = <ls_join>-menge - <ls_join>-wemng.
    IF gs_alv-open_qty < 0.
      gs_alv-open_qty = 0.
    ENDIF.
    gs_alv-last_chg_dt = <ls_join>-aedat.
    gs_alv-sel         = space.
    gs_alv-status_code = space.
    gs_alv-status_msg  = space.
    APPEND gs_alv TO gt_alv.
  ENDLOOP.
ENDFORM.

FORM build_fieldcatalog.
* Build ALV field catalog with formatting and checkbox for selection
  CLEAR gt_fieldcat.

  PERFORM add_fieldcat USING 'EBELN'       'PO Number'        'X'  ''  'EKKO' 'EBELN'  ''.
  PERFORM add_fieldcat USING 'EBELP'       'Item'             'X'  ''  'EKPO' 'EBELP'  ''.
  PERFORM add_fieldcat USING 'LIFNR'       'Vendor'           'X'  ''  'EKKO' 'LIFNR'  ''.
  PERFORM add_fieldcat USING 'MATNR'       'Material'         'X'  ''  'EKPO' 'MATNR'  ''.
  PERFORM add_fieldcat USING 'ORDER_QTY'   'Order Qty'        'X'  ''  'EKPO' 'MENGE'  'X'.
  PERFORM add_fieldcat USING 'GR_QTY'      'GR Qty'           'X'  ''  'EKPO' 'WEMNG'  'X'.
  PERFORM add_fieldcat USING 'OPEN_QTY'    'Open Qty'         'X'  ''  'EKPO' 'MENGE'  'X'.
  PERFORM add_fieldcat USING 'LAST_CHG_DT' 'Last Change Date' 'X'  ''  'EKPO' 'AEDAT'  ''.
  PERFORM add_fieldcat USING 'SEL'         'Closure Flag'     'X'  'X' ''     ''       ''.
  PERFORM add_fieldcat USING 'STATUS_CODE' 'Status'           'X'  ''  ''     ''       ''.
  PERFORM add_fieldcat USING 'STATUS_MSG'  'Status Message'   'X'  ''  ''     ''       ''.

  CLEAR gs_layout.
  gs_layout-zebra             = abap_true.
  gs_layout-colwidth_optimize = abap_true.
ENDFORM.

FORM add_fieldcat USING p_field     TYPE slis_fieldname
                        p_text      TYPE slis_text40
                        p_output    TYPE c
                        p_checkbox  TYPE c
                        p_ref_tab   TYPE tabname
                        p_ref_field TYPE fieldname
                        p_no_sum    TYPE c.
* Helper to append a field to the ALV field catalog
  CLEAR gs_fieldcat.
  gs_fieldcat-fieldname  = p_field.
  gs_fieldcat-seltext_m  = p_text.
  gs_fieldcat-outputlen  = 20.

  IF p_output = 'X'.
    gs_fieldcat-no_out = space.
  ELSE.
    gs_fieldcat-no_out = 'X'.
  ENDIF.

  IF p_checkbox = 'X'.
    gs_fieldcat-checkbox = 'X'.
    gs_fieldcat-edit     = 'X'.
  ENDIF.

  IF p_ref_tab IS NOT INITIAL AND p_ref_field IS NOT INITIAL.
    gs_fieldcat-ref_tabname   = p_ref_tab.
    gs_fieldcat-ref_fieldname = p_ref_field.
  ENDIF.

  IF p_no_sum = 'X'.
    gs_fieldcat-do_sum = space.
  ELSE.
    gs_fieldcat-do_sum = 'X'.
  ENDIF.

  APPEND gs_fieldcat TO gt_fieldcat.
ENDFORM.

FORM build_sort.
* Define default ALV sorting by PO and item
  CLEAR gt_sort.

  CLEAR gs_sort.
  gs_sort-fieldname = 'EBELN'.
  gs_sort-up        = 'X'.
  gs_sort-subtot    = space.
  APPEND gs_sort TO gt_sort.

  CLEAR gs_sort.
  gs_sort-fieldname = 'EBELP'.
  gs_sort-up        = 'X'.
  gs_sort-subtot    = space.
  APPEND gs_sort TO gt_sort.
ENDFORM.

FORM display_alv.
* Display ALV with callbacks for PF-STATUS and user commands
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program       = gv_repid
      i_callback_pf_status_set = 'FRM_PF_STATUS'
      i_callback_user_command  = 'FRM_USER_COMMAND'
      is_layout                = gs_layout
      it_fieldcat              = gt_fieldcat
      it_sort                  = gt_sort
      i_save                   = 'A'
    TABLES
      t_outtab                 = gt_alv
    EXCEPTIONS
      program_error            = 1
      OTHERS                   = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.
ENDFORM.

FORM frm_pf_status USING rt_extab TYPE slis_t_extab.
* Use standard ALV status; no custom buttons. Use 'Save' to trigger closure.
  SET PF-STATUS 'STANDARD' EXCLUDING rt_extab.
ENDFORM.

FORM frm_user_command USING r_ucomm     LIKE sy-ucomm
                            rs_selfield TYPE slis_selfield.
* Handle ALV user commands: toggle selection, process closure, refresh, exit
  CASE r_ucomm.
    WHEN '&IC1'. "Double click: toggle closure flag
      READ TABLE gt_alv INTO gs_alv INDEX rs_selfield-tabindex.
      IF sy-subrc = 0.
        IF gs_alv-sel = 'X'.
          gs_alv-sel = space.
        ELSE.
          gs_alv-sel = 'X'.
        ENDIF.
        MODIFY gt_alv FROM gs_alv INDEX rs_selfield-tabindex.
        rs_selfield-refresh = 'X'.
      ENDIF.

    WHEN '&DATA_SAVE' OR 'SAVE'. "Use Save to process closure
      PERFORM process_closure USING rs_selfield.

    WHEN '&REFRESH'.
      rs_selfield-refresh = 'X'.

    WHEN '&BACK' OR '&EXIT' OR '&CANCEL'.
      LEAVE PROGRAM.

    WHEN OTHERS.
  ENDCASE.
ENDFORM.

FORM process_closure USING rs_selfield TYPE slis_selfield.
* Process selected items: authorization check, BAPI change, commit, log
  DATA: lt_selected TYPE STANDARD TABLE OF ty_po_close,
        ls_selected TYPE ty_po_close,
        lv_has_error TYPE abap_bool,
        lv_msg_text  TYPE string.

  "Collect selected lines
  LOOP AT gt_alv INTO gs_alv WHERE sel = 'X'.
    APPEND gs_alv TO lt_selected.
  ENDLOOP.

  IF lt_selected IS INITIAL.
    MESSAGE 'No items selected for closure.' TYPE 'S'.
    RETURN.
  ENDIF.

  LOOP AT lt_selected INTO ls_selected.

    "Authorization check for PO Type (M_BEST_BSA)
    AUTHORITY-CHECK OBJECT 'M_BEST_BSA'
      ID 'BSART' FIELD ls_selected-bsart
      ID 'ACTVT' FIELD gc_actvt_change.
    IF sy-subrc <> 0.
      PERFORM update_status USING ls_selected-ebeln ls_selected-ebelp
                                  gc_stat_failed
                                  |No authorization for PO type { ls_selected-bsart }|.
      CONTINUE.
    ENDIF.

    "Simulation: do not change data, only mark as simulated
    IF p_sim = abap_true.
      PERFORM update_status USING ls_selected-ebeln ls_selected-ebelp
                                  gc_stat_sim
                                  'Simulation: Would set Delivery Completed.'.
      CONTINUE.
    ENDIF.

    "Prepare BAPI change: set Delivery Completed indicator
    CLEAR: gt_poitem, gt_poitemx, gt_return, gs_poitem, gs_poitemx.

    gs_poitem-po_item     = ls_selected-ebelp.
    gs_poitem-deliv_compl = 'X'.
    APPEND gs_poitem TO gt_poitem.

    gs_poitemx-po_item     = ls_selected-ebelp.
    gs_poitemx-deliv_compl = 'X'.
    gs_poitemx-updateflag  = 'U'.
    APPEND gs_poitemx TO gt_poitemx.

    CALL FUNCTION 'BAPI_PO_CHANGE'
      EXPORTING
        purchaseorder = ls_selected-ebeln
      TABLES
        return        = gt_return
        poitem        = gt_poitem
        poitemx       = gt_poitemx.

    lv_has_error = abap_false.
    CLEAR lv_msg_text.

    LOOP AT gt_return INTO gs_return WHERE type CA 'AEX'. "Abort/Error/System
      lv_has_error = abap_true.
      IF lv_msg_text IS INITIAL.
        lv_msg_text = |{ gs_return-id } { gs_return-number } { gs_return-message }|.
      ENDIF.
      EXIT.
    ENDLOOP.

    IF lv_has_error = abap_true.
      ROLLBACK WORK.
      IF lv_msg_text IS INITIAL.
        lv_msg_text = 'Error occurred during BAPI_PO_CHANGE.'.
      ENDIF.
      PERFORM write_log USING ls_selected-ebeln ls_selected-ebelp gc_stat_failed lv_msg_text.
      PERFORM update_status USING ls_selected-ebeln ls_selected-ebelp gc_stat_failed lv_msg_text.
      CONTINUE.
    ENDIF.

    "If no error, commit and log success
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = abap_true.

    "Collect success message if available
    READ TABLE gt_return INTO gs_return WITH KEY type = 'S'.
    IF sy-subrc = 0 AND lv_msg_text IS INITIAL.
      lv_msg_text = gs_return-message.
    ENDIF.
    IF lv_msg_text IS INITIAL.
      lv_msg_text = 'PO item closed (Delivery Completed set).'.
    ENDIF.

    PERFORM write_log USING ls_selected-ebeln ls_selected-ebelp gc_stat_success lv_msg_text.
    PERFORM update_status USING ls_selected-ebeln ls_selected-ebelp gc_stat_closed  lv_msg_text.

  ENDLOOP.

  rs_selfield-refresh = 'X'.
ENDFORM.

FORM update_status USING p_ebeln      TYPE ekko-ebeln
                         p_ebelp      TYPE ekpo-ebelp
                         p_status     TYPE char10
                         p_status_msg TYPE char255.
* Update ALV internal table line with status and message
  LOOP AT gt_alv ASSIGNING FIELD-SYMBOL(<ls_alv>)
       WHERE ebeln = p_ebeln AND ebelp = p_ebelp.
    <ls_alv>-status_code = p_status.
    <ls_alv>-status_msg  = p_status_msg.
    EXIT.
  ENDLOOP.
ENDFORM.

FORM write_log USING p_ebeln TYPE ekko-ebeln
                     p_ebelp TYPE ekpo-ebelp
                     p_stat  TYPE char10
                     p_msg   TYPE char255.
* Write audit log to custom table (skipped in simulation mode)
  IF p_sim = abap_true.
    RETURN.
  ENDIF.

  CLEAR gs_log.
  gs_log-ebeln   = p_ebeln.
  gs_log-ebelp   = p_ebelp.
  gs_log-uname   = sy-uname.
  gs_log-erdat   = sy-datum.
  gs_log-erzet   = sy-uzeit.
  gs_log-status  = p_stat.
  gs_log-message = p_msg.

  INSERT zpo_close_log FROM gs_log.
  IF sy-subrc <> 0.
    "Silent ignore log errors
  ENDIF.
ENDFORM.