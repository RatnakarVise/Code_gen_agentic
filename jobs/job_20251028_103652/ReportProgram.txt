REPORT zmm_close_open_po.

*---------------------------------------------------------------------*
* Program: ZMM_CLOSE_OPEN_PO
* Purpose: Display open PO items and allow users to mark them as
*          delivery-complete (NO_MORE_GR) via ALV. Supports simulation.
*---------------------------------------------------------------------*

TYPE-POOLS: slis.

CONSTANTS:
  gc_ucomm_close TYPE syucomm VALUE 'ZCLOSE'. "ALV user command for closure

* Data definitions
DATA:
  lt_po           TYPE STANDARD TABLE OF zstr_po_close WITH DEFAULT KEY,
  ls_po           TYPE zstr_po_close,
  lt_fieldcat     TYPE lvc_t_fcat,
  ls_fieldcat     TYPE lvc_s_fcat,
  ls_layout       TYPE lvc_s_layo,
  lv_any_selected TYPE abap_bool.

* Selection screen
SELECT-OPTIONS:
  s_ekorg FOR ekko-ekorg,
  s_werks FOR ekpo-werks,
  s_lifnr FOR ekko-lifnr,
  s_ebeln FOR ekko-ebeln,
  s_bedat FOR ekko-bedat.

PARAMETERS:
  p_sim TYPE boole_d AS CHECKBOX DEFAULT abap_true USER-COMMAND sim. "Simulation mode

*---------------------------------------------------------------------*
* PF-STATUS setup for ALV
*---------------------------------------------------------------------*
FORM set_pf_status USING lt_exclude TYPE slis_t_extab.
  "Try to set custom status with button using function code 'ZCLOSE'
  TRY.
      SET PF-STATUS 'ZMM_CLOSE_PO'.
    CATCH cx_sy_dynprog_not_found.
      "Fallback to STANDARD status if custom does not exist
      SET PF-STATUS 'STANDARD' EXCLUDING lt_exclude.
  ENDTRY.
ENDFORM.

*---------------------------------------------------------------------*
* ALV user command handling
*---------------------------------------------------------------------*
FORM user_command_alv USING lv_ucomm    TYPE syucomm
                             ls_selfield TYPE slis_selfield.
  "Transfer any edited ALV data back to internal table
  PERFORM update_from_alv.

  CASE lv_ucomm.
    WHEN gc_ucomm_close.
      PERFORM process_closure.
      ls_selfield-refresh = abap_true.
      PERFORM refresh_alv.
    WHEN '&ENTER'.
      "Optional: allow ENTER to trigger processing
      PERFORM process_closure.
      ls_selfield-refresh = abap_true.
      PERFORM refresh_alv.
    WHEN OTHERS.
      "No action
  ENDCASE.
ENDFORM.

*---------------------------------------------------------------------*
* Sync ALV edits to internal table
*---------------------------------------------------------------------*
FORM update_from_alv.
  DATA lr_grid TYPE REF TO cl_gui_alv_grid.
  CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'
    IMPORTING
      e_grid = lr_grid.
  IF lr_grid IS BOUND.
    lr_grid->check_changed_data( ).
  ENDIF.
ENDFORM.

*---------------------------------------------------------------------*
* Refresh ALV display
*---------------------------------------------------------------------*
FORM refresh_alv.
  DATA lr_grid TYPE REF TO cl_gui_alv_grid.
  CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'
    IMPORTING
      e_grid = lr_grid.
  IF lr_grid IS BOUND.
    DATA(ls_stbl) = VALUE lvc_s_stbl( row = abap_true col = abap_true ).
    lr_grid->refresh_table_display(
      EXPORTING
        is_stable     = ls_stbl
        i_soft_refresh = abap_true ).
  ENDIF.
ENDFORM.

*---------------------------------------------------------------------*
* Main flow
*---------------------------------------------------------------------*
START-OF-SELECTION.
  PERFORM fetch_open_pos.
  PERFORM build_fieldcatalog.
  PERFORM display_alv.

*---------------------------------------------------------------------*
* Fetch open PO items based on selection criteria
*---------------------------------------------------------------------*
FORM fetch_open_pos.
  CLEAR lt_po.

  SELECT
    e~ebeln,
    e~ebelp,
    e~matnr,
    ko~lifnr,
    e~menge,
    e~wemng,
    e~aedat
    FROM ekpo AS e
    INNER JOIN ekko AS ko
      ON ko~mandt = e~mandt
     AND ko~ebeln = e~ebeln
    INTO TABLE @DATA(lt_items)
    WHERE ko~ekorg IN @s_ekorg
      AND e~werks IN @s_werks
      AND ko~lifnr IN @s_lifnr
      AND ko~ebeln IN @s_ebeln
      AND ko~bedat IN @s_bedat
      AND e~loekz <> 'L'          "Not deleted
      AND e~elikz <> 'X'          "Not delivery-completed
      AND e~menge > e~wemng.      "Open quantity exists

  LOOP AT lt_items ASSIGNING FIELD-SYMBOL(<ls_item>).
    DATA(lv_open_qty) = <ls_item>-menge - <ls_item>-wemng.
    IF lv_open_qty <= 0.
      CONTINUE.
    ENDIF.

    CLEAR ls_po.
    ls_po-ebeln      = <ls_item>-ebeln.
    ls_po-ebelp      = <ls_item>-ebelp.
    ls_po-matnr      = <ls_item>-matnr.
    ls_po-lifnr      = <ls_item>-lifnr.
    ls_po-menge      = <ls_item>-menge.
    ls_po-wemng      = <ls_item>-wemng.
    ls_po-open_qty   = lv_open_qty.
    ls_po-aedat      = <ls_item>-aedat.
    ls_po-flag_close = space.
    ls_po-message    = ''.
    APPEND ls_po TO lt_po.
  ENDLOOP.

  IF lt_po IS INITIAL.
    MESSAGE 'No open PO items found for the given selection.' TYPE 'S'.
  ENDIF.
ENDFORM.

*---------------------------------------------------------------------*
* Build ALV field catalog and layout
*---------------------------------------------------------------------*
FORM build_fieldcatalog.
  CLEAR lt_fieldcat.

  PERFORM add_fcat USING 'EBELN' 'EKKO' 'EBELN' 'PO Number'  abap_false abap_false.
  PERFORM add_fcat USING 'EBELP' 'EKPO' 'EBELP' 'Item'       abap_false abap_false.
  PERFORM add_fcat USING 'LIFNR' 'EKKO' 'LIFNR' 'Vendor'     abap_false abap_false.
  PERFORM add_fcat USING 'MATNR' 'EKPO' 'MATNR' 'Material'   abap_false abap_false.
  PERFORM add_fcat USING 'MENGE' 'EKPO' 'MENGE' 'Order Qty'  abap_false abap_false.
  PERFORM add_fcat USING 'WEMNG' 'EKPO' 'WEMNG' 'GR Qty'     abap_false abap_false.

  CLEAR ls_fieldcat.
  ls_fieldcat-fieldname = 'OPEN_QTY'.
  ls_fieldcat-coltext   = 'Open Qty'.
  ls_fieldcat-outputlen = 15.
  ls_fieldcat-just      = 'R'.
  APPEND ls_fieldcat TO lt_fieldcat.

  PERFORM add_fcat USING 'AEDAT' 'EKPO' 'AEDAT' 'Last Chg Dt' abap_false abap_false.

  CLEAR ls_fieldcat.
  ls_fieldcat-fieldname = 'FLAG_CLOSE'.
  ls_fieldcat-coltext   = 'Closure Flag'.
  ls_fieldcat-checkbox  = abap_true.
  ls_fieldcat-edit      = abap_true.
  ls_fieldcat-outputlen = 1.
  APPEND ls_fieldcat TO lt_fieldcat.

  CLEAR ls_fieldcat.
  ls_fieldcat-fieldname = 'MESSAGE'.
  ls_fieldcat-coltext   = 'Status Message'.
  ls_fieldcat-outputlen = 60.
  ls_fieldcat-edit      = abap_false.
  APPEND ls_fieldcat TO lt_fieldcat.

  CLEAR ls_layout.
  ls_layout-zebra      = abap_true.
  ls_layout-cwidth_opt = abap_true.
ENDFORM.

*---------------------------------------------------------------------*
* Helper to append a field to the ALV field catalog
*---------------------------------------------------------------------*
FORM add_fcat USING    pv_fieldname TYPE lvc_fname
                        pv_reftab    TYPE tabname
                        pv_reffld    TYPE fieldname
                        pv_coltext   TYPE scrtext_l
                        pv_edit      TYPE abap_bool
                        pv_checkbox  TYPE abap_bool.
  CLEAR ls_fieldcat.
  ls_fieldcat-fieldname = pv_fieldname.
  ls_fieldcat-ref_table = pv_reftab.
  ls_fieldcat-ref_field = pv_reffld.
  ls_fieldcat-coltext   = pv_coltext.
  ls_fieldcat-edit      = pv_edit.
  ls_fieldcat-checkbox  = pv_checkbox.
  APPEND ls_fieldcat TO lt_fieldcat.
ENDFORM.

*---------------------------------------------------------------------*
* Display ALV
*---------------------------------------------------------------------*
FORM display_alv.
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC'
    EXPORTING
      i_callback_program       = sy-repid
      i_callback_pf_status_set = 'SET_PF_STATUS'
      i_callback_user_command  = 'USER_COMMAND_ALV'
      is_layout_lvc            = ls_layout
      it_fieldcat_lvc          = lt_fieldcat
      i_save                   = 'A'
    TABLES
      t_outtab                 = lt_po
    EXCEPTIONS
      program_error            = 1
      OTHERS                   = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE 'S' NUMBER sy-msgno WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.
ENDFORM.

*---------------------------------------------------------------------*
* Process closure for selected ALV lines (set NO_MORE_GR)
*---------------------------------------------------------------------*
FORM process_closure.
  DATA: lt_poitem   TYPE TABLE OF bapimepoitem,
        lt_poitemx  TYPE TABLE OF bapimepoitemx,
        ls_poitem   TYPE bapimepoitem,
        ls_poitemx  TYPE bapimepoitemx,
        lt_return   TYPE TABLE OF bapiret2,
        ls_return   TYPE bapiret2,
        lv_failed   TYPE abap_bool,
        lv_msg      TYPE string.

  CLEAR lv_any_selected.

  LOOP AT lt_po ASSIGNING FIELD-SYMBOL(<ls_po_row>) WHERE flag_close = abap_true.
    lv_any_selected = abap_true.

    CLEAR: lt_poitem, lt_poitemx, lt_return, lv_failed, lv_msg.

    "Prepare BAPI item change: set delivery completed (NO_MORE_GR)
    CLEAR ls_poitem.
    ls_poitem-po_item    = <ls_po_row>-ebelp.
    ls_poitem-no_more_gr = abap_true.
    APPEND ls_poitem TO lt_poitem.

    CLEAR ls_poitemx.
    ls_poitemx-po_item    = <ls_po_row>-ebelp.
    ls_poitemx-no_more_gr = abap_true.
    ls_poitemx-updateflag = 'U'.
    APPEND ls_poitemx TO lt_poitemx.

    "Execute change (simulation controlled by checkbox)
    CALL FUNCTION 'BAPI_PO_CHANGE'
      EXPORTING
        purchaseorder = <ls_po_row>-ebeln
        testrun       = COND bapiflag( WHEN p_sim = abap_true THEN abap_true ELSE abap_false )
      TABLES
        return        = lt_return
        poitem        = lt_poitem
        poitemx       = lt_poitemx.

    "Determine failure based on return messages
    lv_failed = xsdbool( line_exists( lt_return[ type = 'E' ] )
                      OR line_exists( lt_return[ type = 'A' ] ) ).

    "Build user message
    IF lt_return IS INITIAL AND p_sim = abap_false.
      lv_msg = |PO { <ls_po_row>-ebeln } Item { <ls_po_row>-ebelp } closed successfully.|.
    ELSEIF lt_return IS INITIAL AND p_sim = abap_true.
      lv_msg = |Simulation: PO { <ls_po_row>-ebeln } Item { <ls_po_row>-ebelp } would be closed.|.
    ELSE.
      LOOP AT lt_return INTO ls_return WHERE type CA 'EAX'.
        IF lv_msg IS INITIAL.
          lv_msg = ls_return-message.
        ELSE.
          lv_msg = lv_msg && ` | ` && ls_return-message.
        ENDIF.
      ENDLOOP.
      IF lv_msg IS INITIAL.
        READ TABLE lt_return INTO ls_return INDEX 1.
        IF sy-subrc = 0.
          lv_msg = ls_return-message.
        ENDIF.
      ENDIF.
    ENDIF.

    "Commit or rollback depending on simulation and outcome
    IF p_sim = abap_false AND lv_failed = abap_false.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = abap_true.
    ELSEIF p_sim = abap_false AND lv_failed = abap_true.
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    ENDIF.

    "Write to log table when not in simulation
    IF p_sim = abap_false.
      DATA(ls_log) = VALUE zpo_close_log(
        mandt   = sy-mandt
        ebeln   = <ls_po_row>-ebeln
        ebelp   = <ls_po_row>-ebelp
        ernam   = sy-uname
        erdat   = sy-datum
        erzet   = sy-uzeit
        status  = COND c( WHEN lv_failed = abap_false THEN 'S' ELSE 'F' )
        message = lv_msg ).
      INSERT zpo_close_log FROM ls_log.
    ENDIF.

    "Update ALV row with message and deselect flag
    <ls_po_row>-message    = lv_msg.
    <ls_po_row>-flag_close = abap_false.
  ENDLOOP.

  "Feedback messages
  IF lv_any_selected IS INITIAL.
    MESSAGE 'No items selected for closure.' TYPE 'S'.
  ELSEIF p_sim = abap_true.
    MESSAGE 'Simulation executed. No database updates performed.' TYPE 'S'.
  ELSE.
    MESSAGE 'Closure processing finished. Check status messages.' TYPE 'S'.
  ENDIF.
ENDFORM.