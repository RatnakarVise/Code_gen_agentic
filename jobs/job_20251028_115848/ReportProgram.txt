REPORT zmm_close_open_po MESSAGE-ID zmm.

TYPE-POOLS: slis.

*-----------------------------------------------------------------------
* Constants
*-----------------------------------------------------------------------
CONSTANTS: gc_x              TYPE c VALUE 'X',
           gc_status_success TYPE c VALUE 'S',
           gc_status_fail    TYPE c VALUE 'F'.

*-----------------------------------------------------------------------
* Global variables
*-----------------------------------------------------------------------
DATA gv_repid      TYPE sy-repid VALUE sy-repid.
DATA gv_simulation TYPE boole_d.
DATA gv_ucomm      TYPE sy-ucomm.

*-----------------------------------------------------------------------
* Output table (assumed DDIC structure zstr_po_close)
* Fields: EBELN, EBELP, MATNR, LIFNR, MENGE, WEMNG, OPEN_QTY, AEDAT,
*         FLAG_CLOSE, MESSAGE
*-----------------------------------------------------------------------
DATA gt_out TYPE STANDARD TABLE OF zstr_po_close WITH DEFAULT KEY.
DATA gs_out TYPE zstr_po_close.

*-----------------------------------------------------------------------
* Selection data holder (raw data from EKKO/EKPO)
*-----------------------------------------------------------------------
TYPES: BEGIN OF ty_sel,
         ebeln TYPE ebeln,
         ebelp TYPE ebelp,
         lifnr TYPE lifnr,
         matnr TYPE matnr,
         menge TYPE ekpo-menge,
         wemng TYPE ekpo-wemng,
         aedat TYPE ekpo-aedat,
         elikz TYPE ekpo-elikz,
         ekorg TYPE ekko-ekorg,
         werks TYPE ekpo-werks,
         bsart TYPE ekko-bsart,
       END OF ty_sel.
DATA gt_sel TYPE STANDARD TABLE OF ty_sel WITH DEFAULT KEY.

*-----------------------------------------------------------------------
* PO -> Type mapping
*-----------------------------------------------------------------------
TYPES: BEGIN OF ty_po_info,
         ebeln TYPE ebeln,
         bsart TYPE bsart,
       END OF ty_po_info.
DATA gt_po_info TYPE HASHED TABLE OF ty_po_info WITH UNIQUE KEY ebeln.

*-----------------------------------------------------------------------
* Authorization cache per PO type
*-----------------------------------------------------------------------
TYPES: BEGIN OF ty_auth_cache,
         bsart      TYPE bsart,
         authorized TYPE boole_d,
       END OF ty_auth_cache.
DATA gt_auth_cache TYPE HASHED TABLE OF ty_auth_cache WITH UNIQUE KEY bsart.

*-----------------------------------------------------------------------
* ALV related
*-----------------------------------------------------------------------
DATA gt_fcat TYPE lvc_t_fcat.
DATA gs_layo TYPE lvc_s_layo.

*-----------------------------------------------------------------------
* Log table buffer (assumed DDIC table zpo_close_log)
*-----------------------------------------------------------------------
DATA gt_log TYPE STANDARD TABLE OF zpo_close_log WITH DEFAULT KEY.

************************************************************************
* Selection Screen
************************************************************************
SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-t01.
SELECT-OPTIONS: s_ebeln FOR ekko-ebeln,
                s_ekorg FOR ekko-ekorg,
                s_werks FOR ekpo-werks,
                s_lifnr FOR ekko-lifnr,
                s_aedat FOR ekpo-aedat.
PARAMETERS: p_sim AS CHECKBOX DEFAULT 'X' USER-COMMAND psim.
SELECTION-SCREEN END OF BLOCK b1.

************************************************************************
* Start-of-selection
************************************************************************
START-OF-SELECTION.
  "Capture simulation flag
  gv_simulation = p_sim.

  "Fetch data, build field catalog, display ALV
  PERFORM fetch_data.
  PERFORM build_fieldcat CHANGING gt_fcat.
  PERFORM display_alv.

************************************************************************
* ALV: Display grid
************************************************************************
FORM display_alv.
  DATA lt_exclude TYPE slis_t_extab.

  "Layout settings
  CLEAR gs_layo.
  gs_layo-zebra      = gc_x.
  gs_layo-cwidth_opt = gc_x.
  gs_layo-edit       = gc_x.

  "ALV Grid display with custom PF-STATUS (expects status ZMM_CLOSE_PO with function CLOSE)
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC'
    EXPORTING
      i_callback_program       = gv_repid
      i_callback_pf_status_set = 'PF_STATUS_SET'
      i_callback_user_command  = 'USER_COMMAND'
      is_layout_lvc            = gs_layo
      it_fieldcat_lvc          = gt_fcat
      i_save                   = 'A'
      i_default                = 'X'
      i_grid_title             = 'Open Purchase Orders - Close Utility'
    TABLES
      t_outtab                 = gt_out
    EXCEPTIONS
      program_error            = 1
      OTHERS                   = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.
ENDFORM.

************************************************************************
* ALV: Set PF-STATUS (toolbar)
************************************************************************
FORM pf_status_set USING pt_extab TYPE slis_t_extab.
  "GUI status 'ZMM_CLOSE_PO' should include a button with code 'CLOSE'
  SET PF-STATUS 'ZMM_CLOSE_PO' EXCLUDING pt_extab.
ENDFORM.

************************************************************************
* ALV: Handle user commands
************************************************************************
FORM user_command USING p_ucomm     LIKE sy-ucomm
                        ps_selfield TYPE slis_selfield.
  DATA lo_grid TYPE REF TO cl_gui_alv_grid.

  gv_ucomm = p_ucomm.

  "Sync any ALV cell edits (e.g. FLAG_CLOSE) back to gt_out
  CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'
    IMPORTING
      e_grid = lo_grid
    EXCEPTIONS
      OTHERS = 1.
  IF sy-subrc = 0 AND lo_grid IS BOUND.
    CALL METHOD lo_grid->check_changed_data.
  ENDIF.

  CASE gv_ucomm.
    WHEN 'CLOSE'.
      PERFORM process_closure.
      ps_selfield-refresh    = gc_x.
      ps_selfield-col_stable = gc_x.
      ps_selfield-row_stable = gc_x.
    WHEN OTHERS.
  ENDCASE.
ENDFORM.

************************************************************************
* Fetch data from EKKO/EKPO and build output list of open items
************************************************************************
FORM fetch_data.
  CLEAR: gt_out, gt_sel, gt_po_info.

  "Select candidate PO items
  SELECT ekko~ebeln,
         ekpo~ebelp,
         ekko~lifnr,
         ekpo~matnr,
         ekpo~menge,
         ekpo~wemng,
         ekpo~aedat,
         ekpo~elikz,
         ekko~ekorg,
         ekpo~werks,
         ekko~bsart
    FROM ekko
    INNER JOIN ekpo
      ON ekko~ebeln = ekpo~ebeln
    INTO TABLE @gt_sel
    WHERE ekko~ebeln IN @s_ebeln
      AND ekko~ekorg IN @s_ekorg
      AND ekko~lifnr IN @s_lifnr
      AND ekpo~werks IN @s_werks
      AND ekpo~aedat IN @s_aedat
      AND ekpo~loekz <> 'L'.  "Exclude deleted items

  IF sy-subrc <> 0 OR gt_sel IS INITIAL.
    MESSAGE 'No data found for given selection' TYPE 'S'.
    RETURN.
  ENDIF.

  "Build list of open items and PO->type map
  DATA ls_po_info TYPE ty_po_info.
  LOOP AT gt_sel ASSIGNING FIELD-SYMBOL(<ls_sel>).

    "Only open items: ELIKZ not set and open qty > 0
    DATA(lv_open_qty) = <ls_sel>-menge - <ls_sel>-wemng.
    IF <ls_sel>-elikz = gc_x OR lv_open_qty <= 0.
      CONTINUE.
    ENDIF.

    CLEAR gs_out.
    gs_out-ebeln      = <ls_sel>-ebeln.
    gs_out-ebelp      = <ls_sel>-ebelp.
    gs_out-lifnr      = <ls_sel>-lifnr.
    gs_out-matnr      = <ls_sel>-matnr.
    gs_out-menge      = <ls_sel>-menge.
    gs_out-wemng      = <ls_sel>-wemng.
    gs_out-open_qty   = lv_open_qty.
    gs_out-aedat      = <ls_sel>-aedat.
    gs_out-flag_close = space.
    CLEAR gs_out-message.
    APPEND gs_out TO gt_out.

    ls_po_info-ebeln = <ls_sel>-ebeln.
    ls_po_info-bsart = <ls_sel>-bsart.
    INSERT ls_po_info INTO TABLE gt_po_info ACCEPTING DUPLICATE KEYS.

  ENDLOOP.

  IF gt_out IS INITIAL.
    MESSAGE 'No open PO items found' TYPE 'S'.
  ENDIF.
ENDFORM.

************************************************************************
* Build ALV field catalog
************************************************************************
FORM build_fieldcat CHANGING pt_fcat TYPE lvc_t_fcat.
  DATA ls_fcat TYPE lvc_s_fcat.

  CLEAR pt_fcat.

  DEFINE m_fcat.
    CLEAR ls_fcat.
    ls_fcat-fieldname = &1.
    ls_fcat-coltext   = &2.
    ls_fcat-outputlen = &3.
    ls_fcat-edit      = &4.
    ls_fcat-checkbox  = &5.
    APPEND ls_fcat TO pt_fcat.
  END-OF-DEFINITION.

  m_fcat 'EBELN'      'PO Number'            10 space space.
  m_fcat 'EBELP'      'Item'                  5 space space.
  m_fcat 'LIFNR'      'Vendor'               10 space space.
  m_fcat 'MATNR'      'Material'             18 space space.
  m_fcat 'MENGE'      'Order Qty'            13 space space.
  m_fcat 'WEMNG'      'GR Qty'               13 space space.
  m_fcat 'OPEN_QTY'   'Open Qty'             13 space space.
  m_fcat 'AEDAT'      'Last Change Date'     10 space space.
  m_fcat 'FLAG_CLOSE' 'Closure Flag'          1 gc_x gc_x.
  m_fcat 'MESSAGE'    'Status Message'      100 space space.
ENDFORM.

************************************************************************
* Process closure for selected items via BAPI_PO_CHANGE
************************************************************************
FORM process_closure.
  DATA lt_to_close TYPE STANDARD TABLE OF zstr_po_close WITH DEFAULT KEY.
  DATA ls_close    TYPE zstr_po_close.

  "Collect items flagged for closure
  LOOP AT gt_out INTO ls_close WHERE flag_close = gc_x.
    APPEND ls_close TO lt_to_close.
  ENDLOOP.

  IF lt_to_close IS INITIAL.
    MESSAGE 'No items flagged for closure' TYPE 'S'.
    RETURN.
  ENDIF.

  "Clear buffered logs
  CLEAR gt_log.

  "Process by PO using grouping
  LOOP AT lt_to_close ASSIGNING FIELD-SYMBOL(<ls_close_by_po>)
       GROUP BY ( ebeln = <ls_close_by_po>-ebeln ) ASCENDING.

    DATA(lv_ebeln) = group-ebeln.

    "Fetch PO type for authorization
    READ TABLE gt_po_info ASSIGNING FIELD-SYMBOL(<ls_info>) WITH KEY ebeln = lv_ebeln.
    IF sy-subrc <> 0 OR <ls_info> IS INITIAL.
      PERFORM mark_items_status USING lv_ebeln |No PO type found for authorization check| gc_status_fail.
      CONTINUE.
    ENDIF.

    "Check authorization for BSART with cache
    DATA ls_auth_cache TYPE ty_auth_cache.
    READ TABLE gt_auth_cache INTO ls_auth_cache WITH KEY bsart = <ls_info>-bsart.
    IF sy-subrc <> 0.
      AUTHORITY-CHECK OBJECT 'M_BEST_BSA'
               ID 'BSART' FIELD <ls_info>-bsart
               ID 'ACTVT' FIELD '02'.
      CLEAR ls_auth_cache.
      ls_auth_cache-bsart      = <ls_info>-bsart.
      ls_auth_cache-authorized = COND boole_d( WHEN sy-subrc = 0 THEN gc_x ELSE space ).
      INSERT ls_auth_cache INTO TABLE gt_auth_cache.
    ENDIF.

    IF ls_auth_cache-authorized IS INITIAL.
      DATA(lv_msg_auth) = |Not authorized to close PO type { <ls_info>-bsart }|.
      PERFORM mark_items_status USING lv_ebeln lv_msg_auth gc_status_fail.
      CONTINUE.
    ENDIF.

    "Prepare BAPI item tables for this PO
    DATA lt_poitem  TYPE TABLE OF bapimepoitem.
    DATA lt_poitemx TYPE TABLE OF bapimepoitemx.
    DATA ls_poitem  TYPE bapimepoitem.
    DATA ls_poitemx TYPE bapimepoitemx.

    CLEAR: lt_poitem, lt_poitemx.

    LOOP AT GROUP <ls_close_by_po> ASSIGNING FIELD-SYMBOL(<ls_member>).
      "Safety: ensure open qty is positive
      IF <ls_member>-open_qty IS INITIAL OR <ls_member>-open_qty <= 0.
        CONTINUE.
      ENDIF.

      CLEAR: ls_poitem, ls_poitemx.
      ls_poitem-po_item     = <ls_member>-ebelp.
      ls_poitem-no_more_gr  = gc_x.

      ls_poitemx-po_item    = <ls_member>-ebelp.
      ls_poitemx-no_more_gr = gc_x.
      ls_poitemx-updateflag = 'U'.

      APPEND ls_poitem  TO lt_poitem.
      APPEND ls_poitemx TO lt_poitemx.
    ENDLOOP.

    IF lt_poitem IS INITIAL.
      PERFORM mark_items_status USING lv_ebeln |No valid items selected for closure| gc_status_fail.
      CONTINUE.
    ENDIF.

    "Simulation mode: do not call BAPI, just mark success message
    IF gv_simulation = gc_x.
      PERFORM mark_items_status USING lv_ebeln |Simulate mode: would set Delivery Completed| gc_status_success.
      CONTINUE.
    ENDIF.

    "Call BAPI to set No More GR (delivery completed)
    DATA lt_return TYPE TABLE OF bapiret2.
    DATA ls_return TYPE bapiret2.
    DATA lv_error  TYPE boole_d.
    DATA lv_msg    TYPE string.

    CLEAR: lt_return, lv_error, lv_msg.

    CALL FUNCTION 'BAPI_PO_CHANGE'
      EXPORTING
        purchaseorder = lv_ebeln
      TABLES
        return        = lt_return
        poitem        = lt_poitem
        poitemx       = lt_poitemx.

    "Analyze BAPI return for errors
    LOOP AT lt_return INTO ls_return WHERE type = 'E' OR type = 'A'.
      lv_error = gc_x.
      IF lv_msg IS INITIAL.
        lv_msg = |{ ls_return-message }|.
      ELSE.
        lv_msg = |{ lv_msg } / { ls_return-message }|.
      ENDIF.
    ENDLOOP.

    IF lv_error = gc_x.
      ROLLBACK WORK.
      IF lv_msg IS INITIAL.
        lv_msg = 'BAPI_PO_CHANGE error occurred'.
      ENDIF.
      PERFORM mark_items_status USING lv_ebeln |Failed: { lv_msg }| gc_status_fail.
      CONTINUE.
    ENDIF.

    "Commit successful change and build success message
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = gc_x.

    IF lt_return IS INITIAL.
      lv_msg = 'Closed: Delivery Completed set'.
    ELSE.
      READ TABLE lt_return INTO ls_return WITH KEY type = 'S'.
      IF sy-subrc = 0 AND ls_return-message IS NOT INITIAL.
        lv_msg = |Closed: { ls_return-message }|.
      ELSE.
        lv_msg = 'Closed: Delivery Completed set'.
      ENDIF.
    ENDIF.

    PERFORM mark_items_status USING lv_ebeln lv_msg gc_status_success.

  ENDLOOP.

  "Persist audit logs if any (non-simulation)
  IF gt_log IS NOT INITIAL AND gv_simulation IS INITIAL.
    INSERT zpo_close_log FROM TABLE gt_log.
    COMMIT WORK.
  ENDIF.
ENDFORM.

************************************************************************
* Update ALV rows for a PO and prepare audit log entries
************************************************************************
FORM mark_items_status USING    pv_ebeln       TYPE ebeln
                                pv_message     TYPE string
                                pv_status_flag TYPE c.
  DATA ls_out TYPE zstr_po_close.

  LOOP AT gt_out INTO ls_out WHERE ebeln = pv_ebeln AND flag_close = gc_x.
    "Update message and (if not simulation) clear the closure flag
    ls_out-message = pv_message.
    IF gv_simulation <> gc_x.
      ls_out-flag_close = space.
    ENDIF.
    MODIFY gt_out FROM ls_out TRANSPORTING message flag_close.

    "Buffer audit log entry (skip in simulation)
    IF gv_simulation IS INITIAL.
      DATA(ls_log) = VALUE zpo_close_log(
        ebeln   = ls_out-ebeln
        ebelp   = ls_out-ebelp
        ernam   = sy-uname
        erdat   = sy-datum
        erzet   = sy-uzeit
        status  = pv_status_flag
        message = pv_message ).
      APPEND ls_log TO gt_log.
    ENDIF.
  ENDLOOP.
ENDFORM.