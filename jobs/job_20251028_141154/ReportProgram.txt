REPORT zmm_close_open_po.

INCLUDE zmm_close_po_top.  " Global declarations, types, constants, and local classes
INCLUDE zmm_close_po_sel.  " Selection screen
INCLUDE zmm_close_po_f01.  " Form routines
INCLUDE zmm_close_po_alv.  " ALV logic

START-OF-SELECTION.
  " Fetch data and display ALV if results exist
  PERFORM fetch_open_pos.
  IF gt_po IS INITIAL.
    MESSAGE 'No open PO items found for the given selection.' TYPE 'I'.
    RETURN.
  ENDIF.
  PERFORM display_alv.



"=========================== INCLUDE: ZMM_CLOSE_PO_TOP ===========================
" Global declarations, types, constants, and local classes

" Authorization buffer for EKKO fields
TYPES: BEGIN OF ty_ekko_auth,
         ebeln TYPE ebeln,
         bsart TYPE bsart,
       END OF ty_ekko_auth.

" Table type for main output and processing
TYPES ty_t_po_close TYPE STANDARD TABLE OF zstr_po_close WITH DEFAULT KEY.

" Row-to-item mapping for BAPI return analysis
TYPES: BEGIN OF ty_row_map,
         row     TYPE i,
         po_item TYPE ebelp,
       END OF ty_row_map.
TYPES ty_t_row_map TYPE STANDARD TABLE OF ty_row_map WITH DEFAULT KEY.

" Global internal tables and work areas
DATA gt_po        TYPE ty_t_po_close.
DATA gs_po        TYPE zstr_po_close.
DATA gt_ekko_auth TYPE HASHED TABLE OF ty_ekko_auth WITH UNIQUE KEY ebeln.

" ALV references
DATA go_alv    TYPE REF TO cl_salv_table.
DATA go_events TYPE REF TO cl_salv_events_table.

" Event handler forward declaration
CLASS lcl_alv_handler DEFINITION DEFERRED.
DATA go_handler TYPE REF TO lcl_alv_handler.

" Constants
CONSTANTS:
  gc_true  TYPE abap_bool VALUE abap_true,
  gc_false TYPE abap_bool VALUE abap_false.

" Local ALV event handler
CLASS lcl_alv_handler DEFINITION.
  PUBLIC SECTION.
    METHODS on_added_function FOR EVENT added_function OF cl_salv_events_table
      IMPORTING e_salv_function.
ENDCLASS.



"=========================== INCLUDE: ZMM_CLOSE_PO_SEL ===========================
" Selection screen definitions

SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-001.
  SELECT-OPTIONS: s_ekorg FOR ekko-ekorg,
                  s_werks FOR ekpo-werks,
                  s_lifnr FOR ekko-lifnr,
                  s_ebeln FOR ekko-ebeln,
                  s_aedat FOR ekko-aedat.
  PARAMETERS p_sim TYPE abap_bool AS CHECKBOX DEFAULT abap_true USER-COMMAND ucom.
SELECTION-SCREEN END OF BLOCK b1.

" Texts
TEXT-001 = 'Selection'.



"=========================== INCLUDE: ZMM_CLOSE_PO_F01 ===========================
" Form routines for data fetching, processing, and logging

FORM fetch_open_pos.
  " Initialize result tables
  CLEAR gt_po.
  CLEAR gt_ekko_auth.

  " Fetch open PO items using a single join and applied selections
  SELECT
    ekko~ebeln,
    ekpo~ebelp,
    ekko~lifnr,
    ekpo~matnr,
    ekpo~menge,
    ekpo~wemng,
    ekko~aedat,
    ekpo~elikz,
    ekpo~loekz,
    ekpo~werks,
    ekko~ekorg,
    ekko~bsart
    FROM ekko
    INNER JOIN ekpo
      ON ekpo~ebeln = ekko~ebeln
    INTO TABLE @DATA(lt_join)
    WHERE ekko~ebeln IN @s_ebeln
      AND ekko~ekorg IN @s_ekorg
      AND ekpo~werks IN @s_werks
      AND ekko~lifnr IN @s_lifnr
      AND ekko~aedat IN @s_aedat
      AND ekpo~loekz = @space
      AND ekpo~elikz <> @abap_true
      AND ekpo~menge > ekpo~wemng.

  IF sy-subrc <> 0 OR lt_join IS INITIAL.
    RETURN.
  ENDIF.

  " Build output table and authorization buffer
  LOOP AT lt_join ASSIGNING FIELD-SYMBOL(<ls_join>).
    " Fill output structure
    CLEAR gs_po.
    gs_po-ebeln      = <ls_join>-ebeln.
    gs_po-ebelp      = <ls_join>-ebelp.
    gs_po-lifnr      = <ls_join>-lifnr.
    gs_po-matnr      = <ls_join>-matnr.
    gs_po-menge      = <ls_join>-menge.
    gs_po-wemng      = <ls_join>-wemng.
    gs_po-open_qty   = <ls_join>-menge - <ls_join>-wemng.
    gs_po-aedat      = <ls_join>-aedat.
    gs_po-flag_close = space.
    gs_po-user_sel   = space.
    gs_po-message    = space.
    APPEND gs_po TO gt_po.

    " Buffer BSART by EBELN for authorization checks
    INSERT VALUE ty_ekko_auth( ebeln = <ls_join>-ebeln bsart = <ls_join>-bsart )
           INTO TABLE gt_ekko_auth.
  ENDLOOP.
ENDFORM.


FORM process_closure USING it_selected TYPE ty_t_po_close.
  " Prepare working copy of selection
  DATA lt_selected TYPE ty_t_po_close.
  lt_selected = it_selected.

  " Guard clause: nothing selected
  IF lt_selected IS INITIAL.
    MESSAGE 'No rows selected for closure.' TYPE 'I'.
    RETURN.
  ENDIF.

  " Simulation mode: only mark messages, no BAPI call
  IF p_sim = gc_true.
    LOOP AT lt_selected ASSIGNING FIELD-SYMBOL(<ls_sel_sim>).
      READ TABLE gt_po ASSIGNING FIELD-SYMBOL(<ls_po_row>)
           WITH KEY ebeln = <ls_sel_sim>-ebeln ebelp = <ls_sel_sim>-ebelp.
      IF sy-subrc = 0.
        <ls_po_row>-user_sel = gc_true.
        <ls_po_row>-message  = |Simulation: Would set delivery complete for { <ls_po_row>-ebeln }/{ <ls_po_row>-ebelp }.|.
      ENDIF.
    ENDLOOP.

    " Redisplay ALV with simulated messages
    IF go_alv IS BOUND.
      go_alv->display( ).
    ENDIF.
    RETURN.
  ENDIF.

  " Real processing: group by EBELN and call BAPI_PO_CHANGE per PO
  SORT lt_selected BY ebeln ebelp.

  DATA: lv_curr_po  TYPE ebeln,
        lt_poitems  TYPE STANDARD TABLE OF bapimepoitem WITH DEFAULT KEY,
        lt_poitemsx TYPE STANDARD TABLE OF bapimepoitemx WITH DEFAULT KEY,
        lt_return   TYPE STANDARD TABLE OF bapiret2      WITH DEFAULT KEY,
        lt_row_map  TYPE ty_t_row_map.

  DATA: lv_bsart   TYPE bsart,
        lv_auth_ok TYPE abap_bool.

  LOOP AT lt_selected ASSIGNING FIELD-SYMBOL(<ls_sel>) GROUP BY ( ebeln = <ls_sel>-ebeln ) ASCENDING.
    " Initialize per-PO variables
    CLEAR: lt_poitems, lt_poitemsx, lt_return, lt_row_map.
    lv_curr_po = <ls_sel>-ebeln.

    " Authorization check for PO document type via EKKO-BSART
    READ TABLE gt_ekko_auth ASSIGNING FIELD-SYMBOL(<ls_auth>)
         WITH TABLE KEY ebeln = lv_curr_po.
    IF sy-subrc = 0.
      lv_bsart = <ls_auth>-bsart.
    ELSE.
      lv_bsart = space.
    ENDIF.

    lv_auth_ok = gc_true.
    IF lv_bsart IS NOT INITIAL.
      AUTHORITY-CHECK OBJECT 'M_BEST_BSA'
        ID 'BSART' FIELD lv_bsart
        ID 'ACTVT' FIELD '02'.
      IF sy-subrc <> 0.
        lv_auth_ok = gc_false.
      ENDIF.
    ENDIF.

    " If not authorized, mark all items for this PO as failed and continue
    IF lv_auth_ok = gc_false.
      LOOP AT GROUP <ls_sel> ASSIGNING FIELD-SYMBOL(<ls_item_unauth>).
        READ TABLE gt_po ASSIGNING FIELD-SYMBOL(<ls_po_row_unauth>)
             WITH KEY ebeln = <ls_item_unauth>-ebeln ebelp = <ls_item_unauth>-ebelp.
        IF sy-subrc = 0.
          <ls_po_row_unauth>-user_sel = gc_true.
          <ls_po_row_unauth>-message  = |Authorization failed for PO type { lv_bsart }.|.
        ENDIF.
        PERFORM write_log USING <ls_item_unauth>-ebeln <ls_item_unauth>-ebelp 'F' |Authorization failed|.
      ENDLOOP.
      CONTINUE.
    ENDIF.

    " Prepare items to close and build row mapping
    LOOP AT GROUP <ls_sel> ASSIGNING FIELD-SYMBOL(<ls_item>).
      " Build BAPI item lines
      APPEND VALUE bapimepoitem(
               po_item     = <ls_item>-ebelp
               deliv_compl = abap_true ) TO lt_poitems.
      " Keep index for BAPI return mapping
      DATA(lv_appended_ix) = sy-tabix.
      APPEND VALUE ty_row_map( row = lv_appended_ix po_item = <ls_item>-ebelp ) TO lt_row_map.

      APPEND VALUE bapimepoitemx(
               po_item     = <ls_item>-ebelp
               po_itemx    = abap_true
               deliv_compl = abap_true ) TO lt_poitemsx.
    ENDLOOP.

    IF lt_poitems IS INITIAL.
      CONTINUE.
    ENDIF.

    " Call BAPI to set delivery complete
    CALL FUNCTION 'BAPI_PO_CHANGE'
      EXPORTING
        purchaseorder = lv_curr_po
      TABLES
        return        = lt_return
        poitem        = lt_poitems
        poitemx       = lt_poitemsx.

    " Analyze return messages for errors
    DATA(lv_has_error) = COND abap_bool(
                           WHEN line_exists( lt_return[ type = 'A' ] )
                             OR line_exists( lt_return[ type = 'E' ] )
                             OR line_exists( lt_return[ type = 'X' ] )
                           THEN gc_true ELSE gc_false ).

    IF lv_has_error = gc_true.
      " Rollback and log failures item-wise
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

      " Default message if only header-level error
      DATA(lv_header_errmsg) = VALUE string( ).
      READ TABLE lt_return INTO DATA(ls_hdr) WITH KEY type = 'E'.
      IF sy-subrc = 0 AND ls_hdr-message IS NOT INITIAL.
        lv_header_errmsg = ls_hdr-message.
      ENDIF.

      LOOP AT lt_row_map INTO DATA(ls_map_err).
        " Try to find item-specific error by ROW index
        DATA(lv_msg_err) = lv_header_errmsg.
        READ TABLE lt_return INTO DATA(ls_ret_i)
             WITH KEY type = 'E' parameter = 'POITEM' row = ls_map_err-row.
        IF sy-subrc = 0 AND ls_ret_i-message IS NOT INITIAL.
          lv_msg_err = ls_ret_i-message.
        ENDIF.

        " Update ALV data and write log
        READ TABLE gt_po ASSIGNING FIELD-SYMBOL(<ls_po_row_fail>)
             WITH KEY ebeln = lv_curr_po ebelp = ls_map_err-po_item.
        IF sy-subrc = 0.
          <ls_po_row_fail>-user_sel   = gc_true.
          <ls_po_row_fail>-flag_close = space.
          <ls_po_row_fail>-message    = COND string( WHEN lv_msg_err IS INITIAL THEN 'Closure failed.' ELSE lv_msg_err ).
        ENDIF.
        PERFORM write_log USING lv_curr_po ls_map_err-po_item 'F' lv_msg_err.
      ENDLOOP.

    ELSE.
      " Commit and log success for all items
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = abap_true.

      " Success message (fallback if none returned)
      DATA(lv_ok_msg) = VALUE string( ).
      READ TABLE lt_return INTO DATA(ls_ret_s) WITH KEY type = 'S'.
      IF sy-subrc = 0 AND ls_ret_s-message IS NOT INITIAL.
        lv_ok_msg = ls_ret_s-message.
      ELSE.
        lv_ok_msg = 'Delivery completion set successfully.'.
      ENDIF.

      LOOP AT lt_row_map INTO DATA(ls_map_ok).
        " Check any item-specific warning/info to reflect in message
        DATA(lv_final_msg) = lv_ok_msg.
        READ TABLE lt_return INTO DATA(ls_ret_w)
             WITH KEY parameter = 'POITEM' row = ls_map_ok-row.
        IF sy-subrc = 0 AND ls_ret_w-message IS NOT INITIAL.
          lv_final_msg = ls_ret_w-message.
        ENDIF.

        " Update ALV and write log
        READ TABLE gt_po ASSIGNING FIELD-SYMBOL(<ls_po_row_ok>)
             WITH KEY ebeln = lv_curr_po ebelp = ls_map_ok-po_item.
        IF sy-subrc = 0.
          <ls_po_row_ok>-user_sel   = gc_true.
          <ls_po_row_ok>-flag_close = gc_true.
          <ls_po_row_ok>-message    = lv_final_msg.
        ENDIF.
        PERFORM write_log USING lv_curr_po ls_map_ok-po_item 'S' lv_final_msg.
      ENDLOOP.
    ENDIF.
  ENDLOOP.

  " Redisplay ALV with updated messages
  IF go_alv IS BOUND.
    go_alv->display( ).
  ENDIF.
ENDFORM.


FORM write_log USING iv_ebeln   TYPE ebeln
                     iv_ebelp   TYPE ebelp
                     iv_status  TYPE char1
                     iv_message TYPE string.
  " Insert audit log into ZPO_CLOSE_LOG (independent LUW)
  " Fields: MANDT, EBELN, EBELP, ERNAM, ERDAT, ERZET, STATUS, MESSAGE
  DATA(ls_log) = VALUE zpo_close_log(
                    mandt   = sy-mandt
                    ebeln   = iv_ebeln
                    ebelp   = iv_ebelp
                    ernam   = sy-uname
                    erdat   = sy-datum
                    erzet   = sy-uzeit
                    status  = iv_status
                    message = iv_message ).

  INSERT zpo_close_log FROM ls_log.
  COMMIT WORK.
ENDFORM.



"=========================== INCLUDE: ZMM_CLOSE_PO_ALV ===========================
" ALV display and event implementation

FORM display_alv.
  " Build SALV and display data with selectable rows and custom function
  TRY.
      cl_salv_table=>factory(
        IMPORTING
          r_salv_table = go_alv
        CHANGING
          t_table      = gt_po ).

      " Set selection mode for rows
      go_alv->get_selections( )->set_selection_mode( if_salv_c_selection_mode=>multiple ).

      " Functions
      DATA(lo_funcs) = go_alv->get_functions( ).
      lo_funcs->set_all( abap_true ).
      lo_funcs->add_function(
        name     = 'CLOSE'
        text     = 'Close Selected'
        tooltip  = 'Close selected PO items'
        position = if_salv_c_function_position=>right_of_salv_functions ).

      " Columns setup: ensure all fields are visible with clear texts
      DATA(lo_cols) = go_alv->get_columns( ).
      lo_cols->set_optimize( abap_true ).

      DATA(lo_col) = lo_cols->get_column( 'EBELN' ).
      lo_col->set_long_text(   'PO Number' ).
      lo_col->set_medium_text( 'PO' ).
      lo_col->set_short_text(  'PO' ).

      lo_col = lo_cols->get_column( 'EBELP' ).
      lo_col->set_long_text(   'Item' ).
      lo_col->set_medium_text( 'Item' ).
      lo_col->set_short_text(  'Itm' ).

      lo_col = lo_cols->get_column( 'LIFNR' ).
      lo_col->set_long_text(   'Vendor' ).
      lo_col->set_medium_text( 'Vendor' ).
      lo_col->set_short_text(  'Vend' ).

      lo_col = lo_cols->get_column( 'MATNR' ).
      lo_col->set_long_text(   'Material' ).
      lo_col->set_medium_text( 'Material' ).
      lo_col->set_short_text(  'Mat' ).

      lo_col = lo_cols->get_column( 'MENGE' ).
      lo_col->set_long_text(   'Ordered Qty' ).
      lo_col->set_medium_text( 'OrderQty' ).
      lo_col->set_short_text(  'OrdQ' ).

      lo_col = lo_cols->get_column( 'WEMNG' ).
      lo_col->set_long_text(   'GR Quantity' ).
      lo_col->set_medium_text( 'GR Qty' ).
      lo_col->set_short_text(  'GR' ).

      lo_col = lo_cols->get_column( 'OPEN_QTY' ).
      lo_col->set_long_text(   'Open Quantity' ).
      lo_col->set_medium_text( 'Open Qty' ).
      lo_col->set_short_text(  'Open' ).

      lo_col = lo_cols->get_column( 'AEDAT' ).
      lo_col->set_long_text(   'Last Change Date' ).
      lo_col->set_medium_text( 'Change Date' ).
      lo_col->set_short_text(  'Date' ).

      lo_col = lo_cols->get_column( 'FLAG_CLOSE' ).
      lo_col->set_long_text(   'Closure Flag' ).
      lo_col->set_medium_text( 'Closed' ).
      lo_col->set_short_text(  'Clos' ).

      lo_col = lo_cols->get_column( 'USER_SEL' ).
      lo_col->set_long_text(   'User Selection' ).
      lo_col->set_medium_text( 'Selected' ).
      lo_col->set_short_text(  'Sel' ).

      lo_col = lo_cols->get_column( 'MESSAGE' ).
      lo_col->set_long_text(   'Status Message' ).
      lo_col->set_medium_text( 'Message' ).
      lo_col->set_short_text(  'Msg' ).

      " Events: handle custom function
      go_events = go_alv->get_event( ).
      IF go_handler IS NOT BOUND.
        CREATE OBJECT go_handler.
      ENDIF.
      SET HANDLER go_handler->on_added_function FOR go_events.

      " Display
      go_alv->display( ).

    CATCH cx_salv_msg INTO DATA(lx_salv).
      MESSAGE lx_salv->get_text( ) TYPE 'E'.
  ENDTRY.
ENDFORM.


CLASS lcl_alv_handler IMPLEMENTATION.
  METHOD on_added_function.
    CASE e_salv_function.
      WHEN 'CLOSE'.
        " Collect selected rows and process closure
        DATA(lt_rows) = go_alv->get_selections( )->get_selected_rows( ).
        IF lt_rows IS INITIAL.
          MESSAGE 'Please select at least one row to close.' TYPE 'I'.
          RETURN.
        ENDIF.

        " Build list of selected items
        DATA lt_selected TYPE ty_t_po_close.
        LOOP AT lt_rows ASSIGNING FIELD-SYMBOL(<lv_row>).
          READ TABLE gt_po ASSIGNING FIELD-SYMBOL(<ls_po>) INDEX <lv_row>.
          IF sy-subrc = 0.
            APPEND <ls_po> TO lt_selected.
          ENDIF.
        ENDLOOP.

        PERFORM process_closure USING lt_selected.
    ENDCASE.
  ENDMETHOD.
ENDCLASS.