REPORT zmm_close_open_po.

"================ Global Declarations ================
TABLES: ekko, ekpo, zpo_close_log.

CONSTANTS:
  gc_act_change TYPE activ_auth VALUE '02',
  gc_true       TYPE abap_bool  VALUE abap_true,
  gc_false      TYPE abap_bool  VALUE abap_false,
  gc_sel_title  TYPE c LENGTH 70 VALUE 'Selection'.

TYPES: BEGIN OF zty_po_closure,
         ebeln      TYPE ebeln,
         ebelp      TYPE ebelp,
         bsart      TYPE bsart,
         lifnr      TYPE lifnr,
         matnr      TYPE matnr,
         menge      TYPE ekpo-menge,
         wemng      TYPE ekpo-wemng,
         open_qty   TYPE ekpo-menge,
         aedat      TYPE ekko-aedat,
         close_flg  TYPE boole_d,     " 'X' if successfully closed
         status_msg TYPE string,      " Status/Message after attempt
       END OF zty_po_closure.

TYPES zty_po_close TYPE zty_po_closure.

DATA:
  lt_po_data TYPE STANDARD TABLE OF zty_po_close WITH DEFAULT KEY,
  ls_po_data TYPE zty_po_close.

DATA:
  go_salv       TYPE REF TO cl_salv_table,
  go_sel        TYPE REF TO cl_salv_selections,
  go_functions  TYPE REF TO cl_salv_functions_list,
  go_columns    TYPE REF TO cl_salv_columns_table,
  go_events     TYPE REF TO cl_salv_events_table.

CLASS lcl_salv_events DEFINITION DEFERRED.
DATA go_event_handler TYPE REF TO lcl_salv_events.

"================ Selection Screen ================
SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE gc_sel_title.
SELECT-OPTIONS:
  s_ekorg FOR ekko-ekorg,
  s_werks FOR ekpo-werks,
  s_lifnr FOR ekko-lifnr,
  s_ebeln FOR ekko-ebeln,
  s_aedat FOR ekko-aedat.
PARAMETERS p_sim TYPE boole_d AS CHECKBOX DEFAULT abap_true USER-COMMAND ucom.
SELECTION-SCREEN END OF BLOCK b1.

"================ Form Declarations ================
FORM fetch_data.
FORM display_alv.
FORM process_selected.
FORM close_items_for_po USING iv_ebeln TYPE ebeln it_items TYPE STANDARD TABLE OF zty_po_close.
FORM check_authority_for_bsart USING iv_bsart TYPE bsart CHANGING cv_auth_ok TYPE abap_bool.
FORM log_closure USING is_item TYPE zty_po_close iv_status TYPE char1 iv_message TYPE string.
FORM update_status_msg USING iv_index TYPE sy-tabix iv_text TYPE string iv_closed TYPE abap_bool.

"================ Start-of-selection ================
START-OF-SELECTION.
  PERFORM fetch_data.
  PERFORM display_alv.

"================ Fetch open PO items ================
FORM fetch_data.
  DATA: lt_raw TYPE STANDARD TABLE OF zty_po_close,
        ls_raw TYPE zty_po_close.

  CLEAR lt_po_data.

  SELECT
    ekko~ebeln,
    ekpo~ebelp,
    ekko~bsart,
    ekko~lifnr,
    ekpo~matnr,
    ekpo~menge,
    ekpo~wemng,
    ekko~aedat
    FROM ekko
    INNER JOIN ekpo ON ekpo~ebeln = ekko~ebeln
    INTO CORRESPONDING FIELDS OF TABLE @lt_raw
    WHERE ekko~ekorg IN @s_ekorg
      AND ekpo~werks IN @s_werks
      AND ekko~lifnr IN @s_lifnr
      AND ekko~ebeln IN @s_ebeln
      AND ekko~aedat IN @s_aedat
      AND ekpo~loekz = @space
      AND ekpo~elikz = @space.

  " Keep only items with positive open quantity
  LOOP AT lt_raw INTO ls_raw.
    ls_raw-open_qty = ls_raw-menge - ls_raw-wemng.
    IF ls_raw-open_qty > 0.
      CLEAR: ls_raw-close_flg, ls_raw-status_msg.
      APPEND ls_raw TO lt_po_data.
    ENDIF.
  ENDLOOP.

  SORT lt_po_data BY ebeln ebelp.
ENDFORM.

"================ Process selected ALV rows ================
FORM process_selected.
  DATA: lt_rows     TYPE salv_t_row,
        lv_row      TYPE salv_de_row,
        ls_selected TYPE zty_po_close,
        lt_selected TYPE STANDARD TABLE OF zty_po_close,
        lv_auth_ok  TYPE abap_bool,
        lv_index    TYPE sy-tabix.

  " Ensure ALV ready
  IF go_sel IS INITIAL.
    MESSAGE 'ALV not initialized' TYPE 'S' DISPLAY LIKE 'E'.
    RETURN.
  ENDIF.

  " Get selected rows
  lt_rows = go_sel->get_selected_rows( ).
  IF lt_rows IS INITIAL.
    MESSAGE 'No rows selected.' TYPE 'S' DISPLAY LIKE 'E'.
    RETURN.
  ENDIF.

  " Collect candidates with authorization check
  LOOP AT lt_rows INTO lv_row.
    READ TABLE lt_po_data INTO ls_selected INDEX lv_row.
    IF sy-subrc <> 0.
      CONTINUE.
    ENDIF.

    " Check authorization for PO type
    PERFORM check_authority_for_bsart USING ls_selected-bsart CHANGING lv_auth_ok.
    IF lv_auth_ok = abap_false.
      lv_index = lv_row.
      PERFORM update_status_msg USING lv_index 'No authorization for PO type' abap_false.
      PERFORM log_closure USING ls_selected 'E' 'No authorization for PO type'.
      CONTINUE.
    ENDIF.

    " Skip already closed or non-open items
    IF ls_selected-close_flg = abap_true OR ls_selected-open_qty <= 0.
      CONTINUE.
    ENDIF.

    APPEND ls_selected TO lt_selected.
  ENDLOOP.

  " Nothing to process
  IF lt_selected IS INITIAL.
    MESSAGE 'Nothing to process.' TYPE 'S' DISPLAY LIKE 'E'.
    RETURN.
  ENDIF.

  " Simulation mode: annotate only
  IF p_sim = abap_true.
    LOOP AT lt_rows INTO lv_row.
      READ TABLE lt_po_data INTO ls_selected INDEX lv_row.
      IF sy-subrc = 0.
        lv_index = lv_row.
        PERFORM update_status_msg USING lv_index 'Simulated: would close (No More GR)' abap_false.
      ENDIF.
    ENDLOOP.
    MESSAGE 'Simulation complete. No changes made.' TYPE 'S'.
    IF go_salv IS BOUND.
      go_salv->display( ).
    ENDIF.
    RETURN.
  ENDIF.

  " Execute: group by PO number
  DATA: lv_curr_ebeln  TYPE ebeln,
        lt_items_by_po TYPE STANDARD TABLE OF zty_po_close.

  SORT lt_selected BY ebeln ebelp.

  LOOP AT lt_selected INTO ls_selected.
    IF lv_curr_ebeln IS INITIAL OR ls_selected-ebeln <> lv_curr_ebeln.
      IF lv_curr_ebeln IS NOT INITIAL AND lt_items_by_po IS NOT INITIAL.
        PERFORM close_items_for_po USING lv_curr_ebeln lt_items_by_po.
      ENDIF.
      CLEAR lt_items_by_po.
      lv_curr_ebeln = ls_selected-ebeln.
    ENDIF.
    APPEND ls_selected TO lt_items_by_po.
  ENDLOOP.

  " Process final group
  IF lv_curr_ebeln IS NOT INITIAL AND lt_items_by_po IS NOT INITIAL.
    PERFORM close_items_for_po USING lv_curr_ebeln lt_items_by_po.
  ENDIF.

  " Refresh ALV
  IF go_salv IS BOUND.
    go_salv->display( ).
  ENDIF.
ENDFORM.

"================ Close items for one PO via BAPI ================
FORM close_items_for_po USING iv_ebeln TYPE ebeln
                              it_items TYPE STANDARD TABLE OF zty_po_close.
  DATA: lt_bapi_items   TYPE TABLE OF bapimepoitem,
        lt_bapi_itemsx  TYPE TABLE OF bapimepoitemx,
        ls_bapi_item    TYPE bapimepoitem,
        ls_bapi_itemx   TYPE bapimepoitemx,
        lt_return       TYPE TABLE OF bapiret2,
        ls_return       TYPE bapiret2,
        lv_error        TYPE abap_bool,
        lv_msg          TYPE string,
        ls_item         TYPE zty_po_close,
        lv_row          TYPE sy-tabix.

  FIELD-SYMBOLS <lt_items> TYPE STANDARD TABLE OF zty_po_close.

  " Build BAPI structures
  ASSIGN it_items TO <lt_items>.
  IF <lt_items> IS ASSIGNED AND lines( <lt_items> ) > 0.
    LOOP AT <lt_items> INTO ls_item.
      CLEAR: ls_bapi_item, ls_bapi_itemx.
      ls_bapi_item-po_item     = ls_item-ebelp.
      ls_bapi_item-no_more_gr  = abap_true.
      ls_bapi_itemx-po_item    = ls_item-ebelp.
      ls_bapi_itemx-po_itemx   = abap_true.
      ls_bapi_itemx-no_more_gr = abap_true.

      APPEND ls_bapi_item  TO lt_bapi_items.
      APPEND ls_bapi_itemx TO lt_bapi_itemsx.
    ENDLOOP.

    " Execute BAPI
    CALL FUNCTION 'BAPI_PO_CHANGE'
      EXPORTING
        purchaseorder = iv_ebeln
      TABLES
        return        = lt_return
        poitem        = lt_bapi_items
        poitemx       = lt_bapi_itemsx.

    " Analyze return messages
    lv_error = abap_false.
    CLEAR lv_msg.
    LOOP AT lt_return INTO ls_return WHERE type CA 'EAX'.
      lv_error = abap_true.
      IF lv_msg IS INITIAL.
        lv_msg = ls_return-message.
      ELSE.
        CONCATENATE lv_msg ls_return-message INTO lv_msg SEPARATED BY '; '.
      ENDIF.
    ENDLOOP.

    IF lv_error = abap_false.
      " Commit on success
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = abap_true.

      IF lv_msg IS INITIAL.
        lv_msg = 'Closed successfully (No More GR set)'.
      ENDIF.

      " Update internal table and log success
      LOOP AT <lt_items> INTO ls_item.
        READ TABLE lt_po_data WITH KEY ebeln = ls_item-ebeln ebelp = ls_item-ebelp TRANSPORTING NO FIELDS.
        lv_row = sy-tabix.
        IF sy-subrc = 0.
          PERFORM update_status_msg USING lv_row lv_msg abap_true.
        ENDIF.
        PERFORM log_closure USING ls_item 'S' lv_msg.
      ENDLOOP.
    ELSE.
      " Rollback and log failure
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

      IF lv_msg IS INITIAL.
        lv_msg = 'Closure failed'.
      ENDIF.

      LOOP AT <lt_items> INTO ls_item.
        READ TABLE lt_po_data WITH KEY ebeln = ls_item-ebeln ebelp = ls_item-ebelp TRANSPORTING NO FIELDS.
        lv_row = sy-tabix.
        IF sy-subrc = 0.
          PERFORM update_status_msg USING lv_row lv_msg abap_false.
        ENDIF.
        PERFORM log_closure USING ls_item 'E' lv_msg.
      ENDLOOP.
    ENDIF.
  ENDIF.
ENDFORM.

"================ Authorization check ================
FORM check_authority_for_bsart USING iv_bsart  TYPE bsart
                               CHANGING cv_auth_ok TYPE abap_bool.
  DATA lv_subrc TYPE sy-subrc.

  AUTHORITY-CHECK OBJECT 'M_BEST_BSA'
    ID 'BSART' FIELD iv_bsart
    ID 'ACTVT' FIELD gc_act_change.
  lv_subrc = sy-subrc.

  IF lv_subrc = 0.
    cv_auth_ok = abap_true.
  ELSE.
    cv_auth_ok = abap_false.
  ENDIF.
ENDFORM.

"================ Log persistence ================
FORM log_closure USING is_item    TYPE zty_po_close
                       iv_status  TYPE char1
                       iv_message TYPE string.
  DATA ls_log TYPE zpo_close_log.

  CLEAR ls_log.
  ls_log-ebeln   = is_item-ebeln.
  ls_log-ebelp   = is_item-ebelp.
  ls_log-uname   = sy-uname.
  ls_log-cdate   = sy-datum.
  ls_log-ctime   = sy-uzeit.
  ls_log-status  = iv_status.
  ls_log-message = iv_message.

  INSERT zpo_close_log FROM ls_log.
  " Note: No explicit COMMIT here; rely on BAPI commits. Adjust if policy differs.
ENDFORM.

"================ Update ALV data row ================
FORM update_status_msg USING iv_index  TYPE sy-tabix
                             iv_text   TYPE string
                             iv_closed TYPE abap_bool.
  READ TABLE lt_po_data INTO ls_po_data INDEX iv_index.
  IF sy-subrc = 0.
    ls_po_data-status_msg = iv_text.
    IF iv_closed = abap_true.
      ls_po_data-close_flg = abap_true.
    ENDIF.
    MODIFY lt_po_data FROM ls_po_data INDEX iv_index.
  ENDIF.
ENDFORM.

"================ ALV Event Handler ================
CLASS lcl_salv_events DEFINITION.
  PUBLIC SECTION.
    METHODS on_user_command FOR EVENT added_function OF cl_salv_events_table
      IMPORTING e_salv_function.
ENDCLASS.

CLASS lcl_salv_events IMPLEMENTATION.
  METHOD on_user_command.
    CASE e_salv_function.
      WHEN 'CLOSE'.
        PERFORM process_selected.
      WHEN OTHERS.
        " No action
    ENDCASE.
  ENDMETHOD.
ENDCLASS.

"================ Display ALV ================
FORM display_alv.
  " No data to show
  IF lt_po_data IS INITIAL.
    MESSAGE 'No open PO items found for selection.' TYPE 'S'.
    EXIT.
  ENDIF.

  " Create SALV
  TRY.
      cl_salv_table=>factory(
        IMPORTING
          r_salv_table = go_salv
        CHANGING
          t_table      = lt_po_data ).
    CATCH cx_salv_msg INTO DATA(lx_salv).
      MESSAGE lx_salv->get_text( ) TYPE 'S' DISPLAY LIKE 'E'.
      RETURN.
  ENDTRY.

  " Functions incl. custom CLOSE
  go_functions = go_salv->get_functions( ).
  go_functions->set_all( abap_true ).
  go_functions->add_function(
    name    = 'CLOSE'
    text    = 'Close Selected'
    tooltip = 'Close selected PO items (sets No More GR)'
  ).

  " Multi-row selection
  go_sel = go_salv->get_selections( ).
  go_sel->set_selection_mode( if_salv_c_selection_mode=>multiple_row ).

  " Column configuration
  go_columns = go_salv->get_columns( ).
  TRY.
      go_columns->get_column( 'EBELN' )->set_long_text( 'PO Number' ).
      go_columns->get_column( 'EBELP' )->set_long_text( 'Item' ).
      go_columns->get_column( 'LIFNR' )->set_long_text( 'Vendor' ).
      go_columns->get_column( 'MATNR' )->set_long_text( 'Material' ).
      go_columns->get_column( 'MENGE' )->set_long_text( 'Order Qty' ).
      go_columns->get_column( 'WEMNG' )->set_long_text( 'GR Qty' ).
      go_columns->get_column( 'OPEN_QTY' )->set_long_text( 'Open Qty' ).
      go_columns->get_column( 'AEDAT' )->set_long_text( 'Last Change Date' ).
      go_columns->get_column( 'CLOSE_FLG' )->set_long_text( 'Closure Flag' ).
      go_columns->get_column( 'STATUS_MSG' )->set_long_text( 'Status Message' ).
      go_columns->get_column( 'BSART' )->set_technical( abap_true ).
    CATCH cx_salv_not_found.
      " Ignore
  ENDTRY.

  " Events and display
  go_events = go_salv->get_event( ).
  CREATE OBJECT go_event_handler.
  SET HANDLER go_event_handler->on_user_command FOR go_events.

  go_salv->display( ).
ENDFORM.