REPORT zmm_close_open_po.

"======================================================================
" Program: ZMM_CLOSE_OPEN_PO
" Purpose: Identify and close open PO items by setting 'No Further GR'
" Author:  Refined version (review, cleanup, optimization)
"======================================================================

"-------------------- Global Declarations -----------------------------

" Types for joined EKKO/EKPO data
TYPES: BEGIN OF ty_join,
         ebeln TYPE ekko-ebeln,
         ebelp TYPE ekpo-ebelp,
         lifnr TYPE ekko-lifnr,
         matnr TYPE ekpo-matnr,
         menge TYPE ekpo-menge,
         wemng TYPE ekpo-wemng,
         aedat TYPE ekko-aedat,
         bsart TYPE ekko-bsart,
         werks TYPE ekpo-werks,
         elikz TYPE ekpo-elikz,
         loekz TYPE ekpo-loekz,
       END OF ty_join.

" Types for PO type (BSART) mapping per PO
TYPES: BEGIN OF ty_bsart_map,
         ebeln TYPE ekko-ebeln,
         bsart TYPE ekko-bsart,
       END OF ty_bsart_map.

" Output table based on DDIC structure (assumed existing)
DATA: lt_out         TYPE STANDARD TABLE OF zstr_po_close WITH DEFAULT KEY,
      ls_out         TYPE zstr_po_close.

" Hashed table to keep unique mapping of EBELN -> BSART
DATA: lt_bsart_map   TYPE HASHED TABLE OF ty_bsart_map WITH UNIQUE KEY ebeln.

" ALV references and flags
DATA: lr_alv_grid    TYPE REF TO cl_gui_alv_grid,
      lv_simulate    TYPE abap_bool.

" ALV field catalog/layout
TYPE-POOLS: slis.
DATA: lt_fieldcat    TYPE slis_t_fieldcat_alv,
      ls_layout      TYPE slis_layout_alv.

" Message constants
CONSTANTS: gc_msg_sim_ok  TYPE string VALUE 'Simulation: Would set final delivery (No further GR).',
           gc_msg_ok      TYPE string VALUE 'Closed successfully.',
           gc_msg_noauth  TYPE string VALUE 'Authorization failed for PO type.',
           gc_msg_no_sel  TYPE string VALUE 'No items selected for closure.',
           gc_msg_bapierr TYPE string VALUE 'BAPI error. See message details.'.

"-------------------- Selection Screen -------------------------------

SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-t01.
PARAMETERS: p_ekorg TYPE ekko-ekorg OBLIGATORY.
PARAMETERS: p_werks TYPE ekpo-werks.
PARAMETERS: p_lifnr TYPE ekko-lifnr.
SELECT-OPTIONS: s_ebeln FOR ekko-ebeln,
                s_aedat FOR ekko-aedat.
PARAMETERS: p_sim  AS CHECKBOX DEFAULT abap_true USER-COMMAND sim.
SELECTION-SCREEN END OF BLOCK b1.

INITIALIZATION.
  text-t01 = 'Selection Parameters'.

AT SELECTION-SCREEN OUTPUT.
  " No dynamic UI handling required

"-------------------- Main Execution ---------------------------------

START-OF-SELECTION.
  " Derive simulation flag
  lv_simulate = COND abap_bool( WHEN p_sim = abap_true THEN abap_true ELSE abap_false ).

  " Read candidate items
  PERFORM get_data.

  " Handle no-data scenario
  IF lt_out IS INITIAL.
    MESSAGE 'No open PO items found for selection.' TYPE 'I'.
    EXIT.
  ENDIF.

  " Display ALV list
  PERFORM display_alv.

"-------------------- Form Routines ----------------------------------

FORM get_data.
  " Purpose: Read open PO items based on selection with basic filters
  DATA: lt_join       TYPE STANDARD TABLE OF ty_join,
        ls_join       TYPE ty_join,
        ls_bsart_map  TYPE ty_bsart_map,
        lv_open       TYPE ekpo-menge.

  " Reset global datasets
  CLEAR: lt_out, lt_bsart_map.

  " Select EKKO/EKPO with filters; exclude logically deleted and already closed
  SELECT a~ebeln,
         b~ebelp,
         a~lifnr,
         b~matnr,
         b~menge,
         b~wemng,
         a~aedat,
         a~bsart,
         b~werks,
         b~elikz,
         b~loekz
    FROM ekko AS a
    INNER JOIN ekpo AS b
      ON a~ebeln = b~ebeln
    INTO TABLE @lt_join
    WHERE a~ekorg = @p_ekorg
      AND a~ebeln IN @s_ebeln
      AND a~aedat IN @s_aedat
      AND ( @p_lifnr IS INITIAL OR a~lifnr = @p_lifnr )
      AND ( @p_werks IS INITIAL OR b~werks = @p_werks )
      AND b~loekz = @space
      AND b~elikz <> 'X'
      AND b~menge > b~wemng.  " Optimization: only items with open qty

  IF lt_join IS INITIAL.
    RETURN.
  ENDIF.

  " Build output items and PO type mapping
  LOOP AT lt_join INTO ls_join.
    lv_open = ls_join-menge - ls_join-wemng.
    IF lv_open > 0.
      CLEAR ls_out.
      ls_out-ebeln      = ls_join-ebeln.
      ls_out-ebelp      = ls_join-ebelp.
      ls_out-lifnr      = ls_join-lifnr.
      ls_out-matnr      = ls_join-matnr.
      ls_out-menge      = ls_join-menge.
      ls_out-wemng      = ls_join-wemng.
      ls_out-open_qty   = lv_open.
      ls_out-aedat      = ls_join-aedat.
      ls_out-flag_close = space.
      ls_out-message    = space.
      APPEND ls_out TO lt_out.

      " Cache PO type per PO once
      READ TABLE lt_bsart_map WITH TABLE KEY ebeln = ls_join-ebeln TRANSPORTING NO FIELDS.
      IF sy-subrc <> 0.
        ls_bsart_map-ebeln = ls_join-ebeln.
        ls_bsart_map-bsart = ls_join-bsart.
        INSERT ls_bsart_map INTO TABLE lt_bsart_map.
      ENDIF.
    ENDIF.
  ENDLOOP.
ENDFORM.

FORM process_closure.
  " Purpose: Process selected items - simulate or execute BAPI_PO_CHANGE
  DATA: lt_sel_out     TYPE STANDARD TABLE OF zstr_po_close,
        ls_sel_out     TYPE zstr_po_close,
        lt_ebeln_list  TYPE SORTED TABLE OF ekko-ebeln WITH UNIQUE KEY table_line,
        lv_ebeln       TYPE ekko-ebeln,
        ls_bsart_map   TYPE ty_bsart_map,
        lv_auth        TYPE abap_bool,
        lt_poitem      TYPE STANDARD TABLE OF bapimepoitem,
        lt_poitemx     TYPE STANDARD TABLE OF bapimepoitemx,
        ls_poitem      TYPE bapimepoitem,
        ls_poitemx     TYPE bapimepoitemx,
        lt_return      TYPE STANDARD TABLE OF bapiret2,
        ls_return      TYPE bapiret2,
        lt_group_out   TYPE STANDARD TABLE OF zstr_po_close,
        ls_group_out   TYPE zstr_po_close,
        lv_error       TYPE abap_bool,
        lv_msg_all     TYPE string,
        lv_msg         TYPE string.

  FIELD-SYMBOLS: <ls_out_fs> TYPE zstr_po_close.

  " Gather user-selected rows (checkbox)
  LOOP AT lt_out ASSIGNING <ls_out_fs> WHERE flag_close = 'X'.
    APPEND <ls_out_fs> TO lt_sel_out.
  ENDLOOP.

  " No rows selected -> inform user
  IF lt_sel_out IS INITIAL.
    MESSAGE 'No items selected for closure.' TYPE 'I'.
    RETURN.
  ENDIF.

  " Build unique list of PO numbers from selection
  LOOP AT lt_sel_out INTO ls_sel_out.
    INSERT ls_sel_out-ebeln INTO TABLE lt_ebeln_list.
  ENDLOOP.

  " Process per PO
  LOOP AT lt_ebeln_list INTO lv_ebeln.

    " Group selected items for current PO
    CLEAR lt_group_out.
    LOOP AT lt_sel_out INTO ls_sel_out WHERE ebeln = lv_ebeln.
      APPEND ls_sel_out TO lt_group_out.
    ENDLOOP.

    " Authorization check on PO type (BSART)
    CLEAR lv_auth.
    READ TABLE lt_bsart_map INTO ls_bsart_map WITH TABLE KEY ebeln = lv_ebeln.
    IF sy-subrc = 0.
      PERFORM check_authority USING ls_bsart_map-bsart CHANGING lv_auth.
    ENDIF.

    " If no authorization -> set messages and log, continue with next PO
    IF lv_auth IS INITIAL.
      LOOP AT lt_out ASSIGNING <ls_out_fs> WHERE ebeln = lv_ebeln AND flag_close = 'X'.
        <ls_out_fs>-message = gc_msg_noauth.
        PERFORM write_log USING <ls_out_fs>-ebeln <ls_out_fs>-ebelp 'F' <ls_out_fs>-message.
      ENDLOOP.
      " Commit logs only (no simulation)
      IF lv_simulate <> abap_true.
        COMMIT WORK AND WAIT.
      ENDIF.
      CONTINUE.
    ENDIF.

    " Simulation mode -> mark as would close and continue
    IF lv_simulate = abap_true.
      LOOP AT lt_out ASSIGNING <ls_out_fs> WHERE ebeln = lv_ebeln AND flag_close = 'X'.
        <ls_out_fs>-message = gc_msg_sim_ok.
      ENDLOOP.
      CONTINUE.
    ENDIF.

    " Build BAPI change tables for selected items
    CLEAR: lt_poitem, lt_poitemx.
    LOOP AT lt_group_out INTO ls_group_out.
      CLEAR: ls_poitem, ls_poitemx.
      ls_poitem-po_item     = ls_group_out-ebelp.
      ls_poitem-no_more_gr  = 'X'.           " Set 'No Further GR' / Final delivery

      ls_poitemx-po_item    = ls_group_out-ebelp.
      ls_poitemx-no_more_gr = 'X'.
      ls_poitemx-updateflag = 'U'.

      APPEND ls_poitem  TO lt_poitem.
      APPEND ls_poitemx TO lt_poitemx.
    ENDLOOP.

    " Execute BAPI to close items of the PO
    CLEAR: lt_return, lv_error, lv_msg_all.
    CALL FUNCTION 'BAPI_PO_CHANGE'
      EXPORTING
        purchaseorder = lv_ebeln
      TABLES
        return       = lt_return
        poitem       = lt_poitem
        poitemx      = lt_poitemx.

    " Evaluate BAPI return messages
    LOOP AT lt_return INTO ls_return.
      IF ls_return-type = 'E' OR ls_return-type = 'A'.
        lv_error = abap_true.
      ENDIF.
      IF lv_msg_all IS INITIAL.
        lv_msg_all = ls_return-message.
      ELSE.
        CONCATENATE lv_msg_all ls_return-message INTO lv_msg_all SEPARATED BY '; '.
      ENDIF.
    ENDLOOP.

    IF lv_error = abap_true.
      " Rollback BAPI changes on error
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

      " Mark all selected items of this PO as failed and log
      LOOP AT lt_out ASSIGNING <ls_out_fs> WHERE ebeln = lv_ebeln AND flag_close = 'X'.
        lv_msg = COND string( WHEN lv_msg_all IS INITIAL THEN gc_msg_bapierr ELSE lv_msg_all ).
        <ls_out_fs>-message = lv_msg.
        PERFORM write_log USING <ls_out_fs>-ebeln <ls_out_fs>-ebelp 'F' <ls_out_fs>-message.
      ENDLOOP.

      " Commit logs only
      COMMIT WORK AND WAIT.

    ELSE.
      " Commit BAPI changes
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = 'X'.

      " Success: update messages and log, then commit logs
      LOOP AT lt_out ASSIGNING <ls_out_fs> WHERE ebeln = lv_ebeln AND flag_close = 'X'.
        <ls_out_fs>-message = gc_msg_ok.
        PERFORM write_log USING <ls_out_fs>-ebeln <ls_out_fs>-ebelp 'S' <ls_out_fs>-message.
      ENDLOOP.

      COMMIT WORK AND WAIT.
    ENDIF.

  ENDLOOP.

ENDFORM.

FORM check_authority USING    iv_bsart TYPE ekko-bsart
                     CHANGING ev_auth  TYPE abap_bool.
  " Purpose: Check if user may change POs for given document type
  ev_auth = abap_false.
  AUTHORITY-CHECK OBJECT 'M_BEST_BSA'
           ID 'BSART' FIELD iv_bsart
           ID 'ACTVT' FIELD '02'.  " Change
  IF sy-subrc = 0.
    ev_auth = abap_true.
  ENDIF.
ENDFORM.

FORM write_log USING iv_ebeln   TYPE ekko-ebeln
                     iv_ebelp   TYPE ekpo-ebelp
                     iv_status  TYPE c
                     iv_message TYPE string.
  " Purpose: Persist processing log per PO item (skipped in simulation)
  IF lv_simulate = abap_true.
    RETURN.
  ENDIF.

  DATA ls_log TYPE zpo_close_log.

  CLEAR ls_log.
  ls_log-mandt   = sy-mandt.
  ls_log-ebeln   = iv_ebeln.
  ls_log-ebelp   = iv_ebelp.
  ls_log-ernam   = sy-uname.
  ls_log-erdat   = sy-datum.
  ls_log-erzet   = sy-uzeit.
  ls_log-status  = iv_status.
  ls_log-message = iv_message.

  INSERT zpo_close_log FROM ls_log.
ENDFORM.

"-------------------- ALV Logic --------------------------------------

FORM display_alv.
  " Purpose: Build field catalog and display editable ALV grid
  PERFORM build_fieldcat.

  CLEAR ls_layout.
  ls_layout-zebra             = 'X'.
  ls_layout-colwidth_optimize = 'X'.

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program       = sy-repid
      i_callback_pf_status_set = 'SET_PF_STATUS'
      i_callback_user_command  = 'USER_COMMAND'
      is_layout                = ls_layout
      it_fieldcat              = lt_fieldcat
      i_save                   = 'A'
    TABLES
      t_outtab                 = lt_out
    EXCEPTIONS
      program_error            = 1
      OTHERS                   = 2.
  IF sy-subrc <> 0.
    MESSAGE 'Error displaying ALV.' TYPE 'E'.
  ENDIF.
ENDFORM.

FORM build_fieldcat.
  " Purpose: Define ALV field catalog
  DATA ls_fcat TYPE slis_fieldcat_alv.

  CLEAR lt_fieldcat.

  " PO Number
  CLEAR ls_fcat.
  ls_fcat-fieldname = 'EBELN'.
  ls_fcat-seltext_m = 'PO Number'.
  ls_fcat-key       = 'X'.
  APPEND ls_fcat TO lt_fieldcat.

  " Item
  CLEAR ls_fcat.
  ls_fcat-fieldname = 'EBELP'.
  ls_fcat-seltext_m = 'Item'.
  ls_fcat-key       = 'X'.
  APPEND ls_fcat TO lt_fieldcat.

  " Vendor
  CLEAR ls_fcat.
  ls_fcat-fieldname = 'LIFNR'.
  ls_fcat-seltext_m = 'Vendor'.
  APPEND ls_fcat TO lt_fieldcat.

  " Material
  CLEAR ls_fcat.
  ls_fcat-fieldname = 'MATNR'.
  ls_fcat-seltext_m = 'Material'.
  APPEND ls_fcat TO lt_fieldcat.

  " Order Qty
  CLEAR ls_fcat.
  ls_fcat-fieldname = 'MENGE'.
  ls_fcat-seltext_m = 'Order Qty'.
  ls_fcat-just      = 'R'.
  APPEND ls_fcat TO lt_fieldcat.

  " GR Qty
  CLEAR ls_fcat.
  ls_fcat-fieldname = 'WEMNG'.
  ls_fcat-seltext_m = 'GR Qty'.
  ls_fcat-just      = 'R'.
  APPEND ls_fcat TO lt_fieldcat.

  " Open Qty
  CLEAR ls_fcat.
  ls_fcat-fieldname = 'OPEN_QTY'.
  ls_fcat-seltext_m = 'Open Qty'.
  ls_fcat-just      = 'R'.
  APPEND ls_fcat TO lt_fieldcat.

  " Last Change Date
  CLEAR ls_fcat.
  ls_fcat-fieldname = 'AEDAT'.
  ls_fcat-seltext_m = 'Last Change Date'.
  APPEND ls_fcat TO lt_fieldcat.

  " Closure Flag (editable checkbox)
  CLEAR ls_fcat.
  ls_fcat-fieldname = 'FLAG_CLOSE'.
  ls_fcat-seltext_m = 'Closure Flag'.
  ls_fcat-checkbox  = 'X'.
  ls_fcat-edit      = 'X'.
  ls_fcat-outputlen = 1.
  APPEND ls_fcat TO lt_fieldcat.

  " Status Message
  CLEAR ls_fcat.
  ls_fcat-fieldname = 'MESSAGE'.
  ls_fcat-seltext_m = 'Status Message'.
  ls_fcat-outputlen = 80.
  APPEND ls_fcat TO lt_fieldcat.
ENDFORM.

FORM set_pf_status USING rt_extab TYPE slis_t_extab.
  " Purpose: Set standard fullscreen PF-STATUS (contains &DATA_SAVE)
  SET PF-STATUS 'STANDARD_FULLSCREEN' EXCLUDING rt_extab.
ENDFORM.

FORM user_command USING ucomm    LIKE sy-ucomm
                        selfield TYPE slis_selfield.
  " Purpose: Handle ALV user actions (Process closure, navigation)
  " Retrieve ALV grid instance to capture edits
  IF lr_alv_grid IS INITIAL.
    CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'
      IMPORTING
        e_grid = lr_alv_grid.
  ENDIF.

  IF lr_alv_grid IS BOUND.
    CALL METHOD lr_alv_grid->check_changed_data.
  ENDIF.

  CASE ucomm.
    WHEN '&DATA_SAVE'. " Process Closure
      PERFORM process_closure.
      selfield-refresh = 'X'. " Refresh ALV to show updated messages
    WHEN 'BACK' OR '&F03' OR '&F12' OR '&F15'.
      LEAVE TO SCREEN 0.
    WHEN OTHERS.
      " No action
  ENDCASE.
ENDFORM.