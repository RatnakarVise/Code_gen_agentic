REPORT zmm_close_open_po NO STANDARD PAGE HEADING.

INCLUDE zmm_close_po_top.    " Global declarations
INCLUDE zmm_close_po_sel.    " Selection screen
INCLUDE zmm_close_po_alv.    " ALV logic
INCLUDE zmm_close_po_f01.    " Form routines

START-OF-SELECTION.
  " Fetch data based on user selection and prepare output table
  PERFORM fetch_data.

  " Exit if nothing to display
  IF lt_po_close IS INITIAL.
    MESSAGE i001(00) WITH 'No open PO items found for the given selection.'.
    RETURN.
  ENDIF.

  " Display ALV list for user interaction
  PERFORM alv_display.


"----------------------------------------------------------------------"
" Include ZMM_CLOSE_PO_TOP - Global declarations                       "
"----------------------------------------------------------------------"
" Types for DB selection
TYPES: BEGIN OF ty_po_db,
         ebeln TYPE ekko-ebeln,
         ebelp TYPE ekpo-ebelp,
         lifnr TYPE ekko-lifnr,
         matnr TYPE ekpo-matnr,
         menge TYPE ekpo-menge,
         wemng TYPE ekpo-wemng,
         aedat TYPE ekko-aedat,
         werks TYPE ekpo-werks,
         bsart TYPE ekko-bsart,
         elikz TYPE ekpo-elikz,
         loekz TYPE ekpo-loekz,
       END OF ty_po_db.

" Hash table for PO type lookup (authorization)
TYPES: BEGIN OF ty_ebeln_bsart,
         ebeln TYPE ekko-ebeln,
         bsart TYPE ekko-bsart,
       END OF ty_ebeln_bsart.

" Table type for main processing and ALV
TYPES: ty_po_close_tt TYPE STANDARD TABLE OF zstr_po_close WITH DEFAULT KEY.

" Global data sets
DATA: lt_po_db    TYPE STANDARD TABLE OF ty_po_db       WITH DEFAULT KEY,
      lt_po_bsart TYPE HASHED TABLE   OF ty_ebeln_bsart WITH UNIQUE KEY ebeln,
      lt_po_close TYPE ty_po_close_tt,
      ls_po_close TYPE zstr_po_close.

" SALV references
DATA: go_salv    TYPE REF TO cl_salv_table.

" Event handler forward declaration and instance
CLASS lcl_alv_handler DEFINITION DEFERRED.
DATA: go_handler TYPE REF TO lcl_alv_handler.

" Constants
CONSTANTS: gc_func_close TYPE salv_de_function VALUE 'CLOSE'.

" Helper/counter variables
DATA: lv_simulate      TYPE abap_bool,
      lv_count_closed  TYPE i,
      lv_count_failed  TYPE i.

" BAPI return table
DATA: lt_bapi_return TYPE STANDARD TABLE OF bapiret2 WITH DEFAULT KEY.


"----------------------------------------------------------------------"
" Include ZMM_CLOSE_PO_SEL - Selection screen                          "
"----------------------------------------------------------------------"
SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-t01.
SELECT-OPTIONS: s_ebeln FOR ekko-ebeln,
                s_ekorg FOR ekko-ekorg,
                s_werks FOR ekpo-werks,
                s_lifnr FOR ekko-lifnr,
                s_aedat FOR ekko-aedat.
PARAMETERS: p_sim AS CHECKBOX DEFAULT 'X' USER-COMMAND uc1.
SELECTION-SCREEN END OF BLOCK b1.

INITIALIZATION.
  text-t01 = 'Selection Criteria'.

AT SELECTION-SCREEN.
  " Set simulate flag based on checkbox
  lv_simulate = xsdbool( p_sim = 'X' ).


"----------------------------------------------------------------------"
" Include ZMM_CLOSE_PO_ALV - ALV logic and event handler               "
"----------------------------------------------------------------------"
CLASS lcl_alv_handler DEFINITION.
  PUBLIC SECTION.
    METHODS on_added_function
      FOR EVENT added_function OF cl_salv_events_table
      IMPORTING e_salv_function.
    METHODS on_double_click
      FOR EVENT double_click OF cl_salv_events_table
      IMPORTING row column.
ENDCLASS.

CLASS lcl_alv_handler IMPLEMENTATION.
  METHOD on_added_function.
    " React on custom toolbar function
    CASE e_salv_function.
      WHEN gc_func_close.
        PERFORM process_closure_selected.
      WHEN OTHERS.
        " Do nothing
    ENDCASE.
  ENDMETHOD.

  METHOD on_double_click.
    " Toggle closure flag on double-click (visual aid)
    READ TABLE lt_po_close ASSIGNING FIELD-SYMBOL(<ls_close>) INDEX row.
    IF sy-subrc = 0 AND <ls_close> IS ASSIGNED.
      IF <ls_close>-flag_close IS INITIAL.
        <ls_close>-flag_close = 'X'.
      ELSE.
        CLEAR <ls_close>-flag_close.
      ENDIF.
      IF go_salv IS BOUND.
        TRY.
            go_salv->refresh( ).
          CATCH cx_salv_error.
            " Ignore refresh issues
        ENDTRY.
      ENDIF.
    ENDIF.
  ENDMETHOD.
ENDCLASS.

FORM alv_display.
  " Build and display SALV with custom function and event handler
  TRY.
      cl_salv_table=>factory(
        IMPORTING
          r_salv_table = go_salv
        CHANGING
          t_table      = lt_po_close ).

      " General display settings
      go_salv->get_functions( )->set_all( abap_true ).
      go_salv->get_display_settings( )->set_striped_pattern( abap_true ).
      go_salv->get_display_settings( )->set_list_header( 'Utility to Close Open POs (ZMM_CLOSE_OPEN_PO)' ).

      " Add custom function to trigger closure
      go_salv->get_functions( )->add_function(
        name     = gc_func_close
        text     = 'Close Selected'
        tooltip  = 'Close selected PO items'
        position = if_salv_c_function_position=>right_of_salv_functions ).

      " Allow multiple row selection
      DATA(lo_sel) = go_salv->get_selections( ).
      lo_sel->set_selection_mode( if_salv_c_selection_mode=>multiple ).

      " Column settings and headers
      DATA(lo_cols) = go_salv->get_columns( ).
      lo_cols->set_optimize( abap_true ).

      TRY.
          DATA(lo_col) = lo_cols->get_column( 'EBELN' ).
          lo_col->set_short_text(  'PO' ).
          lo_col->set_medium_text( 'PO Number' ).
          lo_col->set_long_text(   'Purchase Order Number' ).
        CATCH cx_salv_not_found.
      ENDTRY.

      TRY.
          lo_col = lo_cols->get_column( 'EBELP' ).
          lo_col->set_short_text(  'Item' ).
          lo_col->set_medium_text( 'PO Item' ).
          lo_col->set_long_text(   'Purchase Order Item' ).
        CATCH cx_salv_not_found.
      ENDTRY.

      TRY.
          lo_col = lo_cols->get_column( 'LIFNR' ).
          lo_col->set_short_text(  'Vendor' ).
          lo_col->set_medium_text( 'Vendor' ).
          lo_col->set_long_text(   'Vendor Number' ).
        CATCH cx_salv_not_found.
      ENDTRY.

      TRY.
          lo_col = lo_cols->get_column( 'MATNR' ).
          lo_col->set_short_text(  'Material' ).
          lo_col->set_medium_text( 'Material' ).
          lo_col->set_long_text(   'Material Number' ).
        CATCH cx_salv_not_found.
      ENDTRY.

      TRY.
          lo_col = lo_cols->get_column( 'OPEN_QTY' ).
          lo_col->set_short_text(  'Open Qty' ).
          lo_col->set_medium_text( 'Open Quantity' ).
          lo_col->set_long_text(   'Open Quantity' ).
        CATCH cx_salv_not_found.
      ENDTRY.

      TRY.
          lo_col = lo_cols->get_column( 'FLAG_CLOSE' ).
          lo_col->set_short_text(  'Close' ).
          lo_col->set_medium_text( 'Closure Flag' ).
          lo_col->set_long_text(   'User Selection for Closure' ).
        CATCH cx_salv_not_found.
      ENDTRY.

      TRY.
          lo_col = lo_cols->get_column( 'MESSAGE' ).
          lo_col->set_short_text(  'Message' ).
          lo_col->set_medium_text( 'Status Message' ).
          lo_col->set_long_text(   'System Status Message' ).
        CATCH cx_salv_not_found.
      ENDTRY.

      " Optional fields if present in structure
      TRY.
          lo_col = lo_cols->get_column( 'MENGE' ).
          lo_col->set_short_text(  'Qty' ).
          lo_col->set_medium_text( 'Order Qty' ).
          lo_col->set_long_text(   'Ordered Quantity' ).
        CATCH cx_salv_not_found.
      ENDTRY.

      TRY.
          lo_col = lo_cols->get_column( 'WEMNG' ).
          lo_col->set_short_text(  'GR Qty' ).
          lo_col->set_medium_text( 'GR Quantity' ).
          lo_col->set_long_text(   'Goods Received Quantity' ).
        CATCH cx_salv_not_found.
      ENDTRY.

      TRY.
          lo_col = lo_cols->get_column( 'AEDAT' ).
          lo_col->set_short_text(  'Chg Date' ).
          lo_col->set_medium_text( 'Last Change Date' ).
          lo_col->set_long_text(   'Last Change Date' ).
        CATCH cx_salv_not_found.
      ENDTRY.

      " Register event handler
      CREATE OBJECT go_handler.
      DATA(lo_events) = go_salv->get_event( ).
      SET HANDLER go_handler->on_added_function FOR lo_events.
      SET HANDLER go_handler->on_double_click   FOR lo_events.

      " Display ALV
      go_salv->display( ).

    CATCH cx_salv_error INTO DATA(lx_salv).
      MESSAGE e001(00) WITH lx_salv->get_text( ).
  ENDTRY.
ENDFORM.


"----------------------------------------------------------------------"
" Include ZMM_CLOSE_PO_F01 - Form routines                             "
"----------------------------------------------------------------------"
FORM fetch_data.
  " Initialize work tables
  REFRESH: lt_po_db, lt_po_close, lt_po_bsart.

  " Select open PO items with necessary filters (EKKO + EKPO)
  SELECT a~ebeln,
         b~ebelp,
         a~lifnr,
         b~matnr,
         b~menge,
         b~wemng,
         a~aedat,
         b~werks,
         a~bsart,
         b~elikz,
         b~loekz
    FROM ekko AS a
    INNER JOIN ekpo AS b
      ON a~ebeln = b~ebeln
    INTO TABLE @lt_po_db
    WHERE a~ebeln IN @s_ebeln
      AND a~ekorg IN @s_ekorg
      AND b~werks IN @s_werks
      AND a~lifnr IN @s_lifnr
      AND a~aedat IN @s_aedat
      AND b~loekz = @space
      AND b~elikz = @space
      AND b~menge > b~wemng. " only items with open quantity

  IF sy-subrc <> 0.
    RETURN.
  ENDIF.

  " Sort for stable processing
  SORT lt_po_db BY ebeln ebelp.

  " Build ALV data and buffer PO types for authorization checks
  LOOP AT lt_po_db ASSIGNING FIELD-SYMBOL(<ls_db>).
    " Calculate open quantity
    DATA(lv_open) = <ls_db>-menge - <ls_db>-wemng.
    IF lv_open <= 0.
      CONTINUE.
    ENDIF.

    CLEAR ls_po_close.
    ls_po_close-ebeln     = <ls_db>-ebeln.
    ls_po_close-ebelp     = <ls_db>-ebelp.
    ls_po_close-lifnr     = <ls_db>-lifnr.
    ls_po_close-matnr     = <ls_db>-matnr.
    ls_po_close-menge     = <ls_db>-menge.
    ls_po_close-wemng     = <ls_db>-wemng.
    ls_po_close-open_qty  = lv_open.
    ls_po_close-aedat     = <ls_db>-aedat.
    CLEAR ls_po_close-flag_close.
    CLEAR ls_po_close-message.

    APPEND ls_po_close TO lt_po_close.

    " Buffer PO type for authorization check (unique per PO)
    INSERT VALUE ty_ebeln_bsart( ebeln = <ls_db>-ebeln bsart = <ls_db>-bsart )
      INTO TABLE lt_po_bsart.
  ENDLOOP.
ENDFORM.

FORM process_closure_selected.
  " Process closure for user-selected rows in ALV
  CHECK go_salv IS BOUND.

  " Fetch selected ALV indices
  DATA(lo_sel)  = go_salv->get_selections( ).
  DATA(lt_rows) = lo_sel->get_selected_rows( ).

  IF lt_rows IS INITIAL.
    MESSAGE i001(00) WITH 'Please select at least one row to close.'.
    RETURN.
  ENDIF.

  " Build list of selected items from indices
  DATA(lt_selected) = VALUE ty_po_close_tt( ).
  LOOP AT lt_rows ASSIGNING FIELD-SYMBOL(<lv_idx>).
    READ TABLE lt_po_close ASSIGNING FIELD-SYMBOL(<ls_close>) INDEX <lv_idx>.
    IF sy-subrc = 0 AND <ls_close> IS ASSIGNED.
      APPEND <ls_close> TO lt_selected.
    ENDIF.
  ENDLOOP.

  IF lt_selected IS INITIAL.
    MESSAGE i001(00) WITH 'No valid rows selected.'.
    RETURN.
  ENDIF.

  " Reset counters
  lv_count_closed = 0.
  lv_count_failed = 0.

  " Group selected items by EBELN and process each PO
  LOOP AT lt_selected ASSIGNING FIELD-SYMBOL(<ls_sel>) GROUP BY ( ebeln = <ls_sel>-ebeln ) ASCENDING.
    DATA(lv_ebeln) = GROUP ebeln.

    " Collect items for this PO
    DATA(lt_items_for_po) = VALUE ty_po_close_tt( ).
    LOOP AT GROUP <ls_sel> ASSIGNING FIELD-SYMBOL(<ls_item>).
      APPEND <ls_item> TO lt_items_for_po.
    ENDLOOP.

    " Execute simulate or real close
    IF lv_simulate = abap_true.
      PERFORM simulate_close USING lv_ebeln lt_items_for_po.
    ELSE.
      PERFORM execute_close USING lv_ebeln lt_items_for_po.
    ENDIF.
  ENDLOOP.

  " Refresh ALV to show updated results
  IF go_salv IS BOUND.
    TRY.
        go_salv->refresh( ).
      CATCH cx_salv_error.
        " Ignore refresh issues
    ENDTRY.
  ENDIF.

  " Final info message
  DATA(lv_info) = |Closure completed. Success: { lv_count_closed }, Failed: { lv_count_failed }.|.
  MESSAGE s001(00) WITH lv_info.
ENDFORM.

FORM simulate_close USING iv_ebeln TYPE ekko-ebeln
                          it_items TYPE ty_po_close_tt.
  " Simulation: update ALV messages and counters without calling BAPI
  LOOP AT it_items INTO DATA(ls_item).
    READ TABLE lt_po_close ASSIGNING FIELD-SYMBOL(<ls_close>)
         WITH KEY ebeln = ls_item-ebeln ebelp = ls_item-ebelp.
    IF sy-subrc = 0 AND <ls_close> IS ASSIGNED.
      <ls_close>-flag_close = 'X'.
      <ls_close>-message    = |Simulated: Would set delivery complete.|.
      lv_count_closed       = lv_count_closed + 1.
    ENDIF.
  ENDLOOP.
ENDFORM.

FORM execute_close USING iv_ebeln TYPE ekko-ebeln
                         it_items TYPE ty_po_close_tt.
  " Execute real closure using BAPI with authorization check and logging

  " Determine PO type for authorization
  DATA(lv_bsart) = VALUE ekko-bsart( ).
  READ TABLE lt_po_bsart ASSIGNING FIELD-SYMBOL(<ls_b>) WITH KEY ebeln = iv_ebeln.
  IF sy-subrc = 0 AND <ls_b> IS ASSIGNED.
    lv_bsart = <ls_b>-bsart.
  ENDIF.

  " Authorization check for PO document type
  DATA(lv_auth_ok) = abap_false.
  PERFORM check_authority_bsa USING lv_bsart CHANGING lv_auth_ok.
  IF lv_auth_ok = abap_false.
    DATA(lv_auth_msg) = |Authorization failed for PO type { lv_bsart }.|.
    LOOP AT it_items INTO DATA(ls_item_auth).
      READ TABLE lt_po_close ASSIGNING FIELD-SYMBOL(<ls_close_auth>)
           WITH KEY ebeln = ls_item_auth-ebeln ebelp = ls_item_auth-ebelp.
      IF sy-subrc = 0 AND <ls_close_auth> IS ASSIGNED.
        <ls_close_auth>-message = lv_auth_msg.
        CLEAR <ls_close_auth>-flag_close.
      ENDIF.
      PERFORM write_log USING ls_item_auth-ebeln ls_item_auth-ebelp 'F' lv_auth_msg.
      lv_count_failed = lv_count_failed + 1.
    ENDLOOP.
    RETURN.
  ENDIF.

  " Prepare BAPI structures
  DATA: lt_poitem  TYPE STANDARD TABLE OF bapimepoitem,
        lt_poitemx TYPE STANDARD TABLE OF bapimepoitemx.

  LOOP AT it_items INTO DATA(ls_item_bapi).
    APPEND VALUE bapimepoitem( po_item    = ls_item_bapi-ebelp
                               no_more_gr = 'X' ) TO lt_poitem.
    APPEND VALUE bapimepoitemx( po_item    = ls_item_bapi-ebelp
                                no_more_gr = 'X'
                                po_itemx   = 'X' ) TO lt_poitemx.
  ENDLOOP.

  " Call BAPI to close items
  REFRESH lt_bapi_return.
  CALL FUNCTION 'BAPI_PO_CHANGE'
    EXPORTING
      purchaseorder = iv_ebeln
    TABLES
      return        = lt_bapi_return
      poitem        = lt_poitem
      poitemx       = lt_poitemx.

  " Analyze BAPI messages
  DATA(lv_has_error) = abap_false.
  LOOP AT lt_bapi_return ASSIGNING FIELD-SYMBOL(<ls_ret>) WHERE type = 'E' OR type = 'A'.
    lv_has_error = abap_true.
    EXIT.
  ENDLOOP.

  DATA(lv_msg_text) = ||.
  IF lt_bapi_return IS NOT INITIAL.
    LOOP AT lt_bapi_return ASSIGNING <ls_ret>.
      IF lv_msg_text IS INITIAL.
        lv_msg_text = |{ <ls_ret>-type } { <ls_ret>-id }-{ <ls_ret>-number } { <ls_ret>-message }|.
      ELSE.
        lv_msg_text = |{ lv_msg_text } / { <ls_ret>-message }|.
      ENDIF.
    ENDLOOP.
  ENDIF.

  " Commit or rollback and update ALV + log
  IF lv_has_error = abap_true.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

    DATA(lv_fail_msg) = COND string( WHEN lv_msg_text IS INITIAL THEN 'Closure failed (unknown error)' ELSE lv_msg_text ).
    LOOP AT it_items INTO DATA(ls_item_fail).
      READ TABLE lt_po_close ASSIGNING FIELD-SYMBOL(<ls_close_fail>)
           WITH KEY ebeln = ls_item_fail-ebeln ebelp = ls_item_fail-ebelp.
      IF sy-subrc = 0 AND <ls_close_fail> IS ASSIGNED.
        <ls_close_fail>-message = lv_fail_msg.
        CLEAR <ls_close_fail>-flag_close.
      ENDIF.
      PERFORM write_log USING ls_item_fail-ebeln ls_item_fail-ebelp 'F' lv_fail_msg.
      lv_count_failed = lv_count_failed + 1.
    ENDLOOP.

  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.

    LOOP AT it_items INTO DATA(ls_item_ok).
      READ TABLE lt_po_close ASSIGNING FIELD-SYMBOL(<ls_close_ok>)
           WITH KEY ebeln = ls_item_ok-ebeln ebelp = ls_item_ok-ebelp.
      IF sy-subrc = 0 AND <ls_close_ok> IS ASSIGNED.
        <ls_close_ok>-message    = 'Closed successfully'.
        <ls_close_ok>-flag_close = 'X'.
      ENDIF.
      PERFORM write_log USING ls_item_ok-ebeln ls_item_ok-ebelp 'S' 'Closed successfully'.
      lv_count_closed = lv_count_closed + 1.
    ENDLOOP.

  ENDIF.
ENDFORM.

FORM check_authority_bsa USING    iv_bsart TYPE ekko-bsart
                         CHANGING ev_ok    TYPE abap_bool.
  " Check change authorization for PO document type
  ev_ok = abap_false.
  IF iv_bsart IS INITIAL.
    RETURN.
  ENDIF.

  AUTHORITY-CHECK OBJECT 'M_BEST_BSA'
           ID 'ACTVT' FIELD '02'
           ID 'BSART' FIELD iv_bsart.
  IF sy-subrc = 0.
    ev_ok = abap_true.
  ELSE.
    ev_ok = abap_false.
  ENDIF.
ENDFORM.

FORM write_log USING iv_ebeln  TYPE ekko-ebeln
                     iv_ebelp  TYPE ekpo-ebelp
                     iv_status TYPE c
                     iv_msg    TYPE string.
  " Persist processing log (non-critical)
  DATA(ls_log) = VALUE zpo_close_log(
                   ebeln   = iv_ebeln
                   ebelp   = iv_ebelp
                   ernam   = sy-uname
                   erdat   = sy-datum
                   erzet   = sy-uzeit
                   status  = iv_status
                   message = iv_msg ).

  INSERT zpo_close_log FROM ls_log.
  IF sy-subrc <> 0.
    " Ignore logging issues
  ENDIF.
ENDFORM.